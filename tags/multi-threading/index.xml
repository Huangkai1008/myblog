<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>multi-threading on Huanghuang's Blog</title><link>https://huangkai1008.github.io/tags/multi-threading/</link><description>Recent content in multi-threading on Huanghuang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 08 Feb 2018 22:49:14 +0800</lastBuildDate><atom:link href="https://huangkai1008.github.io/tags/multi-threading/index.xml" rel="self" type="application/rss+xml"/><item><title>Python线程池使用</title><link>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 08 Feb 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</guid><description>介绍 从Python3.2开始，标准库为我们提供了 concurrent.futures 模块，它提供了 ThreadPoolExecutor (线程池)和ProcessPoolExecutor (进程池)两个类。
相比 threading 等模块，该模块通过 submit 返回的是一个 future 对象，它是一个未来可期的对象，通过它可以获悉线程的状态主线程(或进程)中可以获取某一个线程(进程)执行的状态或者某一个任务执行的状态及返回值：
1.主线程可以获取某一个线程（或者任务的）的状态，以及返回值。
2.当一个线程完成的时候，主线程能够立即知道。
3.让多线程和多进程的编码接口一致。
基本使用 from concurrent.futures import ThreadPoolExecutor import time def get_page(url): time.sleep(url) return url with ThreadPoolExecutor(max_workers=5) as t: # 创建一个最大容纳数量为5的线程池 task1 = t.submit(get_page, 1) task2 = t.submit(get_page, 2) # 通过submit提交执行的函数到线程池中 task3 = t.submit(get_page, 3) print(f&amp;#34;task1: {task1.done()}&amp;#34;) # 通过done来判断线程是否完成 print(f&amp;#34;task2: {task2.done()}&amp;#34;) print(f&amp;#34;task3: {task3.done()}&amp;#34;) time.sleep(2.5) print(f&amp;#34;task1: {task1.done()}&amp;#34;) print(f&amp;#34;task2: {task2.done()}&amp;#34;) print(f&amp;#34;task3: {task3.done()}&amp;#34;) print(task1.result()) # 通过result来获取返回值 &amp;gt;&amp;gt;&amp;gt; task1: False task2: False task3: False .</description></item></channel></rss>
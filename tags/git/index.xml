<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Huanghuang's Blog</title><link>https://huangkai1008.github.io/tags/git/</link><description>Recent content in git on Huanghuang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 12 Oct 2019 14:36:49 +0800</lastBuildDate><atom:link href="https://huangkai1008.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git工作流</title><link>https://huangkai1008.github.io/p/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Sat, 12 Oct 2019 14:36:49 +0800</pubDate><guid>https://huangkai1008.github.io/p/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>GitFlow 基本介绍 Gitflow 提倡使用 feature branches 模式来开发各个相互独立的功能，同时分成不同的分支以便进行集成和发布
分支介绍 长期分支
主分支(master)
开发分支(develop)
在gitflow下, develop 分支是一个类似全能的分支，用来存放、测试所有的代码，同时也是主要是用来合并代码、集成功能的分支
作为一个开发人员，在这是不允许直接提交代码到 develop 分支上的，更更更不允许直接提交到 master 分支。master 分支代表的是一个「stable」的分支，包含的是已投产或即将投产的代码。如果一段代码在 master 分支上，即代表它已经投产或即将投产发布
短期分支
功能分支(feature)
热补丁分支(hotfix)
预发分支(release)
feature
功能性分支从 develop 分支上产生， 根据新需求来新建 feature 分支， 开发完成后，要再并入 develop 分支， 合并完分支后一般会删除这个feature分支
在 feature 分支的命名规则上，可以约定以 「feat-」开头，后面跟上问题单编号。如「feat-APS-151-add-name-field」。以「feat-」开头，可以让 CI 服务器识别出这是一个 feature 分支，「APS-151」是Jira 问题单的编号，可以链接到问题单，剩下的部分则是对该功能的简短的说明</description></item><item><title>Git Commit Message编写规范</title><link>https://huangkai1008.github.io/p/git-commit-message%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 12 Jul 2019 14:14:15 +0800</pubDate><guid>https://huangkai1008.github.io/p/git-commit-message%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</guid><description>Git提交代码时需要提交Message, 为了使得提交信息更清晰明了, 需要确定规范
现在比较流行的规范是Angular规范, 也根据此规范衍生了Conventional Commits specification
规范 格式 &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt; &amp;lt;BLANK LINE&amp;gt; &amp;lt;body&amp;gt; &amp;lt;BLANK LINE&amp;gt; &amp;lt;footer&amp;gt; 按照空行分割为三个部分, 分别为Header，Body 和 Footer 其中，Header 是必需的，Body 和 Footer 可以省略 不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）, 这是为了避免自动换行影响美观
组成 Header Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）
type
​type用于说明 commit 的类别，只允许使用下面7个标识
feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 格式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：构建过程或辅助工具的变动 如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要
scope
scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同
subject
subject是 commit 目的的简短描述，不超过50个字符</description></item></channel></rss>
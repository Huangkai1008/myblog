<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Huanghuang's Blog</title><link>https://huangkai1008.github.io/post/</link><description>Recent content in Posts on Huanghuang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 14 Jun 2020 16:02:15 +0800</lastBuildDate><atom:link href="https://huangkai1008.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP</title><link>https://huangkai1008.github.io/p/http/</link><pubDate>Sun, 14 Jun 2020 16:02:15 +0800</pubDate><guid>https://huangkai1008.github.io/p/http/</guid><description>DNS 和域名 一、域名 网域名称（英语：Domain Name，简称：Domain），简称域名、网域，是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。域名可以说是一个IP地址的代称，目的是为了便于记忆后者。
域名的层级 www.example.com 真正的域名是 www.example.com.root ，简写为 www.example.com. 。因为，根域名 .root 对于所有域名都是一样的，所以平时是省略的。
根域名的下一级，叫做顶级域名（top-level domain，缩写为TLD），比如 .com 、 .net ；再下一级叫做次级域名（second-level domain，缩写为SLD），比如 www.example.com 里面的 .example ，这一级域名是用户可以注册的；再下一级是主机名（host），比如www.example.com里面的www，又称为三级域名，这是用户在自己的域里面为服务器分配的名称，是用户可以任意分配的。
主机名.次级域名.顶级域名.根域名 host.sld.tld.root
二、DNS 域名系统（英语：Domain Name System，缩写：DNS）是一个分布式数据库，提供了域名和 IP地址之间相互转换的服务。
查询过程 DNS 服务器根据域名的层级，进行分级查询。
每一级域名都有自己的NS（Name Server） 记录，NS记录指向该级域名的域名服务器。这些服务器知道下一级域名的各种记录。
&amp;ldquo;分级查询&amp;rdquo;，就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址
过程大致为:
从&amp;quot;根域名服务器&amp;quot;查到&amp;quot;顶级域名服务器&amp;quot;的NS记录和A记录（IP地址） 从&amp;quot;顶级域名服务器&amp;quot;查到&amp;quot;次级域名服务器&amp;quot;的NS记录和A记录（IP地址） 从&amp;quot;次级域名服务器&amp;quot;查出&amp;quot;主机名&amp;quot;的IP地址 dig math.stackexchange.com ; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.3-1ubuntu1.15-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; math.stackexchange.com ;; global options: +cmd ;; Got answer: ;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 50719 ;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 65494 ;; QUESTION SECTION: ;math.</description></item><item><title>HTTP</title><link>https://huangkai1008.github.io/p/http/</link><pubDate>Fri, 12 Jun 2020 12:22:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/http/</guid><description>HTTP 一、概述 请求和响应报文 客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。
请求消息（requests） GET / HTTP/1.1 Host: developer.mozilla.org Accept-Language: fr 起始行（start line）：包含一个HTTP方法（method）、请求目标（request target） 和 HTTP 版本 （HTTP version）
消息头（headers）： 整个 header（包括其值）表现为单行形式
一个空行用来分隔首部和内容主体 Body
消息主体（body）
响应消息(responses) HTTP/1.1 200 OK Date: Sat, 09 Oct 2010 14:28:02 GMT Server: Apache Last-Modified: Tue, 01 Dec 2009 20:18:22 GMT ETag: &amp;#34;51142bc1-7449-479b075b2891b&amp;#34; Accept-Ranges: bytes Content-Length: 29769 Content-Type: text/html &amp;lt;!DOCTYPE html... (here comes the 29769 bytes of the requested web page) 状态行（status line)： 协议版本，通常为 HTTP/1.</description></item><item><title>MySQL的日志系统</title><link>https://huangkai1008.github.io/p/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 05 Jun 2020 22:07:21 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>日志类型 ​ MySQL主要有两种日志类型，一种是物理日志（记录在某个数据页上做了什么修改)，一种是逻辑日志(存储了逻辑SQL修改语句)。redo log属于物理日志，binlog和undo log属于逻辑日志，其中物理日志的恢复速度远快于逻辑日志。
redo log和undo log都属于InnoDB引擎层下的事务日志（transaction log）。
重做日志 (redo log) 预写式技术 (Write Ahead logging, WAL) ​ InnoDB 引擎对数据更新，是先将更新记录写入到重做日志，在系统空闲时或者按照设定的更新策略再将日志中的内容更新到磁盘中，这就是预写式技术 (Write Ahead logging, WAL)，这种技术可以大大减少IO操作的频率，提升数据刷新的效率。
重做日志的策略 ​ 重做日志（redo log）是 InnoDB 引擎层的日志，用来记录事务操作引起数据的变化，记录的是数据页的物理修改，提供前滚操作，redo log 保证事务的持久性。重做日志由两部分组成，一是内存中的重做日志缓冲区 (redo log buffer)，因为重做日志缓冲区在内存中，所以它是易失的，另一个就是在磁盘上的重做日志文件 (redo log file)，它是持久的。
​ 当我们在一个事务中尝试对数据进行修改时，它会先将数据从磁盘读入内存，并更新内存中缓存的数据，然后生成一条重做日志并写入重做日志缓存，当事务真正提交时，MySQL 会将重做日志缓存中的内容刷新到重做日志文件，再将内存中的数据更新到磁盘上。
​ 值得注意的是，redo log 的大小是固定的，为了能够持续不断的对更新记录进行写入，在redo log日志中设置了两个标志位置，checkpoint和write pos。checkpoint表示记录擦除的位置，write pos表示记录写入的位置。当write pos标志到了日志结尾时，会从结尾跳至日志头部循环写入，所以redo log的逻辑结构并不是线性的，可以看做一个圆周运动，逻辑结构见下图：
​ 当write_pos追上checkpoint时，表示redo log日志已经写满。这时不能继续执行新的数据库更新语句，需要停下来先删除一些记录，执行checkpoint规则腾出可写空间。
checkpoint规则: checkpoint触发后，将buffer中脏数据页和脏日志页都刷到磁盘。所谓的脏数据页就是指内存中未刷到磁盘的数据
​ redo log中最重要的概念就是缓冲池buffer pool，这是在内存中分配的一个区域，包含了磁盘中部分数据页的映射，作为访问数据库的缓冲。当请求读取数据时，会先判断是否在缓冲池命中，如果未命中才会在磁盘上进行检索后放入缓冲池；当请求写入数据时，会先写入缓冲池，缓冲池中修改的数据会定期刷新到磁盘中。这一过程也被称之为刷脏 。
​ 因此，当数据修改时，除了修改buffer pool中的数据，还会在redo log中记录这次操作；当事务提交时，会根据redo log的记录对数据进行刷盘。如果MySQL宕机，重启时可以读取redo log中的数据，对数据库进行恢复，从而保证了事务的持久性，使得数据库获得crash-safe能力。</description></item><item><title>事务</title><link>https://huangkai1008.github.io/p/%E4%BA%8B%E5%8A%A1/</link><pubDate>Tue, 02 Jun 2020 22:25:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E4%BA%8B%E5%8A%A1/</guid><description>概念 事务就是一组原子性的SQL查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。在 MySQL 中，事务支持是在引擎层实现的。
ACID特性 原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行
一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。
隔离性（Isolation）：通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。
持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。
一个实现了ACID的数据库，相比没有实现ACID的数据库，通常会需要更强的CPU处理能力、更大的内存和更多的磁盘空间。
隔离级别（Isolation level） READ UNCOMMITTED（读未提交）
​ 事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读（Dirty Read）。
READ COMMITTED（读提交）
​ Oracle和SQL Server的默认隔离级别。一个事务可以读取另一个已提交的事务。换句话说，一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。这个级别有时候也叫做不可重复读（nonrepeatable read），因为两次执行同样的查询，可能会得到不一样的结果。MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题
REPEATABLE READ（可重复读）
​ MySQL的默认隔离级别。一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题，在可重复读级别通过间隙锁解决了幻读问题。
SERIALIZABLE（可串行化）
​ SERIALIZABLE是最高的隔离级别。它通过强制事务串行执行，避免了前面说的幻读的问题。简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用的问题。实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才考虑采用该级别。
隔离级别 脏读可能性 不可重复读可能性 幻读可能性 加锁读 READ UNCOMMITTED √ √ √ × READ COMMITTED × √ √ × REPEATABLE READ × × √ × SERIALIZABLE × × × √ 查看MySQL的隔离级别</description></item><item><title>MySQL的基础架构</title><link>https://huangkai1008.github.io/p/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jun 2020 21:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid><description>逻辑架构 MySQL可以大体分为Server层和存储引擎层两部分, 见图1
Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。 存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎 连接器(Connector) ​ 连接器负责和客户端建立连接、获取权限、维持和管理连接。
# Mysql连接命令 mysql -h$ip -P$port -u$user -p MySQL客户端和服务端完成TCP握手后，连接器需要认证身份
如果用户名或密码不对，你就会收到一个&amp;quot;Access denied for user&amp;quot;的错误，然后客户端程序结束执行。 如果用户名密码认证通过，连接器会到权限表里面查出拥有的权限，之后这个连接里面的权限判断逻辑，都将依赖于此时读到的权限，这就意味着，一个用户成功建立连接后，即使这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。 查询缓存(Query Cache) ​ 在连接建立完成后，MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。
MySQL 8.0 版本的查询缓存功能被移除了
分析器(Parser) 分析器的主要功能是对SQL语句做解析
分析器会先做词法分析，再做语法分析，语法分析器会根据语法规则，判断 SQL 语句是否满足 MySQL 语法 优化器(Query Optimizer) ​ 优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。优化器并不关心表使用的是什么存储引擎，但存储引擎对于优化查询是有影响的。优化器会请求存储引擎提供容量或某个具体操作的开销信息，以及表数据的统计信息等。例如，某些存储引擎的某种索引，可能对一些特定的查询有优化。
执行器(Query execution engine) ​ 开始执行的时候，要先判断一下对于表有没有执行操作的权限，如果没有，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。
对于一个特定的例子</description></item><item><title>Awesome Software</title><link>https://huangkai1008.github.io/p/awesome-software/</link><pubDate>Sun, 01 Dec 2019 22:21:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/awesome-software/</guid><description>IDE Jetbrains系列 Editor Vscode Sublime text Typora(markdown编辑) Notion(笔记软件) 画图 Microsoft visio drawing.io 数据库 Mysql系列 Navicat Tableplus Jetbrains Datagrip Redis系列 RDM(redis desktop manager) CVS Jetbrains系IDE自带 SourceTree 接口测试 Postman Vm VirtualBox Vagrant Windows SubLinux(WSL) Vmware ssh工具 MobaXterm xshell 系统工具 Everything Utools 接口文档工具 apidoc swagger yapi 终端 cmder Windows Termial</description></item><item><title>日志库Loguru使用教程</title><link>https://huangkai1008.github.io/p/%E6%97%A5%E5%BF%97%E5%BA%93loguru%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link><pubDate>Fri, 22 Nov 2019 15:19:35 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%97%A5%E5%BF%97%E5%BA%93loguru%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid><description>Loguru是一个好用的第三方python日志库
安装 pip install loguru 初步使用 添加日志到标准输出流 import sys from loguru import logger logger.add(sys.stderr, format=&amp;#39;{time} {level} {message}&amp;#39;, filter=&amp;#39;my module&amp;#39;, level=&amp;#39;INFO&amp;#39;) 添加日志到文件 from loguru import logger logger.add(&amp;#39;file_1.log&amp;#39;, rotation=&amp;#39;500 MB&amp;#39;) # Automatically rotate too big file logger.add(&amp;#34;file_2.log&amp;#34;, rotation=&amp;#39;12:00&amp;#39;) # New file is created each day at noon logger.add(&amp;#34;file_3.log&amp;#34;, rotation=&amp;#34;1 week&amp;#34;) # Once the file is too old, it&amp;#39;s rotated logger.add(&amp;#34;file_X.log&amp;#34;, retention=&amp;#34;10 days&amp;#34;) # Cleanup after some time logger.add(&amp;#34;file_Y.log&amp;#34;, compression=&amp;#34;zip&amp;#34;) # Save some loved space 捕获异常 from loguru import logger @logger.</description></item><item><title>Eventlet使用</title><link>https://huangkai1008.github.io/p/eventlet%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 22 Nov 2019 11:20:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/eventlet%E4%BD%BF%E7%94%A8/</guid><description>Evenlet是一个Python的基于携程的网络库，它改变了你代码运行的方式，但是没有改变你怎么写代码
安装 pip install eventlet 简单使用 从eventlet.green导入相关库 import eventlet from eventlet.green import urllib2 urls = [ &amp;#34;https://www.google.com/intl/en_ALL/images/logo.gif&amp;#34;, &amp;#34;http://python.org/images/python-logo.gif&amp;#34;, &amp;#34;http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif&amp;#34;, ] def fetch(url): print(&amp;#34;opening&amp;#34;, url) body = urllib2.urlopen(url).read() print(&amp;#34;done with&amp;#34;, url) return url, body pool = eventlet.GreenPool(200) for url, body in pool.imap(fetch, urls): print(&amp;#34;got body from&amp;#34;, url, &amp;#34;of length&amp;#34;, len(body)) 使用spawn使用协程 import time import eventlet def green_thread_1(num): eventlet.greenthread.sleep(1) print(f&amp;#39;green_thread_1 get result {num}&amp;#39;) return x def green_thread_2(num): eventlet.greenthread.sleep(2) print(f&amp;#39;green_thread_2 get result {num}&amp;#39;) return y time1 = time.</description></item><item><title>Git工作流</title><link>https://huangkai1008.github.io/p/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Sat, 12 Oct 2019 14:36:49 +0800</pubDate><guid>https://huangkai1008.github.io/p/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>GitFlow 基本介绍 Gitflow 提倡使用 feature branches 模式来开发各个相互独立的功能，同时分成不同的分支以便进行集成和发布
分支介绍 长期分支
主分支(master)
开发分支(develop)
在gitflow下, develop 分支是一个类似全能的分支，用来存放、测试所有的代码，同时也是主要是用来合并代码、集成功能的分支
作为一个开发人员，在这是不允许直接提交代码到 develop 分支上的，更更更不允许直接提交到 master 分支。master 分支代表的是一个「stable」的分支，包含的是已投产或即将投产的代码。如果一段代码在 master 分支上，即代表它已经投产或即将投产发布
短期分支
功能分支(feature)
热补丁分支(hotfix)
预发分支(release)
feature
功能性分支从 develop 分支上产生， 根据新需求来新建 feature 分支， 开发完成后，要再并入 develop 分支， 合并完分支后一般会删除这个feature分支
在 feature 分支的命名规则上，可以约定以 「feat-」开头，后面跟上问题单编号。如「feat-APS-151-add-name-field」。以「feat-」开头，可以让 CI 服务器识别出这是一个 feature 分支，「APS-151」是Jira 问题单的编号，可以链接到问题单，剩下的部分则是对该功能的简短的说明</description></item><item><title>Black安装和使用</title><link>https://huangkai1008.github.io/p/black%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 27 Sep 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/black%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>Black是一个毫不妥协的python代码格式化工具, 特点是可配置项较少 Black依赖于python3.6+, 官方地址在https://github.com/psf/black
Install pip install black Configure pyproject.toml
[tool.black] skip-string-normalization = true # 禁用双引号风格 pycharm
Create external tools
windows: File -&amp;gt; Settings -&amp;gt; Tools -&amp;gt; External Tools
Configure file watcher</description></item><item><title>Poetry安装和使用</title><link>https://huangkai1008.github.io/p/poetry%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 14 Sep 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/poetry%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>安装 custom installer
curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python source $HOME/.poetry/env pip
pip install poetry # 不推荐, 可能会有冲突 验证安装
poetry --version 使用 项目初始化
从pipenv/pip等工具迁移
poetry init # 进入交互式命令行填写项目信息, 会生成pyproject.toml 添加依赖
添加包
poetry add poetry add fastapi=0.38.1 -E all # pipenv install fastapi[all] poetry add celery --extras &amp;#34;librabbitmq redis auth msgpack&amp;#34; # pip install &amp;#34;celery[librabbitmq,redis,auth,msgpack]&amp;#34; 依赖安装</description></item><item><title>Nginx安装和基本使用</title><link>https://huangkai1008.github.io/p/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 26 Aug 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。 其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。 Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强
Install platform: Centos7
version: 7.2
安装
wget http://nginx.org/download/nginx-1.16.1.tar.gz tar -zxvf nginx-1.16.1.tar.gz cd nginx-1.16.1 sudo ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install whereis nginx # 查看nginx安装地址 /usr/local/nginx BasicUse 启动
/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 重启
cd /usr/local/nginx/sbin ./nginx -s reload Example Conf # /usr/local/nginx/conf/nginx.conf #user nobody; worker_processes 1; #error_log logs/error.log; #error_log logs/error.</description></item><item><title>Manjaro安装配置</title><link>https://huangkai1008.github.io/p/manjaro%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 01 Aug 2019 22:21:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/manjaro%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>基本安装 使用rufus以dd模式写入U盘 从u盘启动 将manjaro启动项中的driver和boot添加或修改driver=intel才能进入安装界面(双显卡笔记本) 安装系统, 注意不要联网, 否则容易卡在安装 reboot进入系统 manjaro启动项中quiet后增加nouveau.modeset=0(双显卡) 双显卡使用prime管理连接外接显示器 删除bumblebee或者开源驱动
sudo mhwd -r pci nonfree 0300 安装nvidia私有闭源驱动
方法一:
sudo mhwd -i pci video-nvidia 或
sudo mhwd -i pci video-nvidia-390xx # 390xx或者435xx, 数字是驱动版本... 方法二 系统设置-硬件设定中右键安装video-nvidia-390xx之类的驱动
安装依赖
sudo pacman -S linuxXXX-headers acpi_call-dkms xorg-xrandr xf86-video-intel git 注: XXX 为内核版本， 本来我的5.3有点问题，降级成4.19才可以，以4.19为例便是 linux419-headers
注入
sudo modprobe acpi_call 使用github上的脚本</description></item><item><title>Git Commit Message编写规范</title><link>https://huangkai1008.github.io/p/git-commit-message%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 12 Jul 2019 14:14:15 +0800</pubDate><guid>https://huangkai1008.github.io/p/git-commit-message%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</guid><description>Git提交代码时需要提交Message, 为了使得提交信息更清晰明了, 需要确定规范
现在比较流行的规范是Angular规范, 也根据此规范衍生了Conventional Commits specification
规范 格式 &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt; &amp;lt;BLANK LINE&amp;gt; &amp;lt;body&amp;gt; &amp;lt;BLANK LINE&amp;gt; &amp;lt;footer&amp;gt; 按照空行分割为三个部分, 分别为Header，Body 和 Footer 其中，Header 是必需的，Body 和 Footer 可以省略 不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）, 这是为了避免自动换行影响美观
组成 Header Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）
type
​type用于说明 commit 的类别，只允许使用下面7个标识
feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 格式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：构建过程或辅助工具的变动 如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要
scope
scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同
subject
subject是 commit 目的的简短描述，不超过50个字符</description></item><item><title>值得关注的Python库</title><link>https://huangkai1008.github.io/p/%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84python%E5%BA%93/</link><pubDate>Mon, 27 May 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84python%E5%BA%93/</guid><description>Web Frameworks Uvicorn 基于asyncio开发的一个轻量级高效的 web 服务器框架 Starlette Quart Responder Fastapi Sanic Utils Poetry 新的Python依赖包管理工具 Pipenv 用了很久的现在也在用的&amp;hellip; 有时候Locking速度感人, pipfile声明版本可以防止很多坑 Black 代码格式化库 Loguru python日志库 PySnooper python Debugger ORM Gino tortoise-orm Test locust 压力测试工具 Environment python-dotenv environs</description></item><item><title>Spring初始化工具</title><link>https://huangkai1008.github.io/p/spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E5%85%B7/</link><pubDate>Thu, 07 Feb 2019 11:15:10 +0800</pubDate><guid>https://huangkai1008.github.io/p/spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E5%85%B7/</guid><description>使用IDEA初始化Spring Boot项目 选择File -&amp;gt; New -&amp;gt; Project 新建项目
选择Spring Initializr， 点击Next，填写项目基本信息 项目依赖勾选Spring Web选择Finish等待项目构建
​</description></item><item><title>WSGI ASGI UWSGI的区别</title><link>https://huangkai1008.github.io/p/wsgi-asgi-uwsgi%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Thu, 24 Jan 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/wsgi-asgi-uwsgi%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>What is wsgi **CGI(通用网关接口， Common Gateway Interface/CGI)** **CGI是定义客户端与web服务器交流方式的程序**。&amp;lt;u&amp;gt;例如正常情况下客户端发来一个请求，根据HTTP协议Web服务器将请求内容解析出来，进过计算后，再将加us安出来的内容封装好，例如服务器返回一个HTML页面，并且根据HTTP协议构建返回内容的响应格式。涉及到TCP连接、HTTP原始请求和相应格式的这些，都由一个软件来完成，这时，以上的工作需要一个程序来完成，而这个程序便是CGI&amp;lt;/u&amp;gt;** **WSGI(Web服务器网关接口(Python Web Server Gateway Interface，WSGI)** `WSGI`就是基于`Python`的以`CGI`为标准做一些扩展的协议 What is uwsgi uWSGI，是指实现了WSGI协议的一个web服务器。即用来接受客户端请求，转发响应的程序
What is asgi 异步网关协议接口，一个介于网络协议服务和`Python`应用之间的标准接口，能够处理多种通用的协议类型，包括`HTTP`，`HTTP2`和`WebSocket` ASGI尝试保持在一个简单的应用接口的前提下，提供允许数据能够在任意的时候、被任意应用进程发送和接受的抽象。并且同样描述了一个新的，兼容HTTP请求响应以及WebSocket数据帧的序列格式。允许这些协议能通过网络或本地socket进行传输，以及让不同的协议被分配到不同的进程中
Difference between wsgi &amp;amp; asgi 1. Wsgi is based on `Http`, not support `websocket` 2. Asgi is the extension of wsgi.</description></item><item><title>RabbitMQ基础安装使用</title><link>https://huangkai1008.github.io/p/rabbitmq%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 12 Nov 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/rabbitmq%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description>RabbitMQ Platform: Centos7 安装 install Erlang
yum install erlang install rabbitMQ
# rpm安装 wget https://github.com/rabbitmq/rabbitmq-server/releases/download/rabbitmq_v3_6_14/rabbitmq-server-3.6.14-1.el7.noarch.rpm yum install rabbitmq-server-3.6.14-1.el7.noarch.rpm # yum安装 yum install rabbitmq-server 配置 启动远程访问
[{rabbit, [ {loopback_users, []} ]}] 安装插件
/sbin/rabbitmq-plugins enable rabbitmq_management 使用 服务命令
systemctl start rabbitmq-server.service # 启动 systemctl status rabbitmq-server.service # 查看状态 systemctl restart rabbitmq-server.service # 重启 systemctl enable rabbitmq-server.service # 开机自启 添加用户</description></item><item><title>Mysql优化</title><link>https://huangkai1008.github.io/p/mysql%E4%BC%98%E5%8C%96/</link><pubDate>Tue, 06 Nov 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E4%BC%98%E5%8C%96/</guid><description>mysql中min和max查询优化 max()函数需扫描where条件过滤后的所有行
慎用max()函数，特别是频繁执行的sql，若需用到可转化为order by id desc limit 1</description></item><item><title>Redis安装配置</title><link>https://huangkai1008.github.io/p/redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 11 Oct 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>Redis 安装 Platform: centos7
version: 5.0
安装
wget http://download.redis.io/releases/redis-5.0.0.tar.gz # 获取包 tar -zxvf redis-5.0.0.tar.gz mv redis-5.0.0 /usr/local/redis make &amp;amp;&amp;amp; make install Redis配置 设置配置文件目录
mkdir -p /etc/redis cp redis.conf /etc/redis 修改配置文件
vim /etc/redis/redis.conf daemonize yes (no -&amp;gt; yes) # 守护进程 bind 0.0.0.0 (127.0.0.1 -&amp;gt; 0.0.0.0) # 远程登录 protected-mode no (yes -&amp;gt; no) # 关闭保护模式/或者添加密码 Redis使用 启动</description></item><item><title>Angular Starter</title><link>https://huangkai1008.github.io/p/angular-starter/</link><pubDate>Tue, 09 Oct 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/angular-starter/</guid><description>安装Angular 确保node/npm已安装 node -v 查看node版本 npm -v 查看npm版本 安装typescript npm install -g typescript 安装Angular CLI npm install -g @angular/cli ng version # 验证angular-cli版本 建立一个新的Angular项目 Angular CLI 为我们提供了两种方式，用于创建新的应用程序：
ng init - 在当前目录创建新的应用程序
ng new - 创建新的目录，然后在新建的目录中运行 ng init 命令
因此 ng new 与 ng init 的功能是相似的，只是 ng new 会为我们创建新的目录
创建应用 ng new my-app 可用选项 --dry-run: boolean, 默认为 false, 若设置 dry-run 则不会创建任何文件 --verbose: boolean, 默认为 false --link-cli: boolean, 默认为 false, 自动链接到 @angular/cli 包 --skip-install: boolean, 默认为 false, 表示跳过 npm install --skip-git: boolean, 默认为 false, 表示该目录不初始化为 git 仓库 --skip-tests: boolean, 默认为 false, 表示不创建 tests 相关文件 --skip-commit: boolean, 默认为 false, 表示不进行初始提交 --directory: string, 用于设置创建的目录名，默认与应用程序的同名 --source-dir: string, 默认为 'src', 用于设置源文件目录的名称 --style: string, 默认为 'css', 用于设置选用的样式语法 ('css', 'less' or 'scss') --prefix: string, 默认为 'app', 用于设置创建新组件时，组件选择器使用的前缀 --mobile: boolean, 默认为 false,表示是否生成 Progressive Web App 应用程序 --routing: boolean, 默认为 false, 表示新增带有路由信息的模块，并添加到根模块中 --inline-style: boolean, 默认为 false, 表示当创建新的应用程序时，使用内联样式 --inline-template: boolean, 默认为 false, 表示当创建新的应用程序时，使用内联模板</description></item><item><title>MongoDB的安装</title><link>https://huangkai1008.github.io/p/mongodb%E7%9A%84%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 12 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mongodb%E7%9A%84%E5%AE%89%E8%A3%85/</guid><description>安装 Platform: centos7</description></item><item><title>MariaDB安装</title><link>https://huangkai1008.github.io/p/mariadb%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mariadb%E5%AE%89%E8%A3%85/</guid><description>MariaDB安装 platform: Centos7
Install
yum install -y mariadb-server MariaDB配置使用 Using
systemctl start mariadb.service # 启动 systemctl enable mariadb.service # 开机自启 Configure
首先是设置密码，会提示先输入密码
Enter current password for root (enter for none): &amp;lt;–直接回车
Set root password? [Y/n] &amp;lt;– 是否设置root用户密码，输入y并回车或直接回车
New password: &amp;lt;– 设置root用户的密码
Re-enter new password: &amp;lt;– 再输入一次你设置的密码
其他配置
Remove anonymous users?</description></item><item><title>Mysql安装配置</title><link>https://huangkai1008.github.io/p/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>Mysql安装 版本: 8.0 添加源 yum local install https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm 安装 yum install mysql-community-server Mysql配置 初始化
sudo mysqld --initialize --user=mysql --basedir=/usr --datadir=/var/lib/mysql 启动mysql
systemctl start mysqld 设置mysql开机自启
systemctl enable mysqld 查看初始密码
grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log 进入mysql
mysql -u root -p 修改密码
ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;Huang|12345&amp;#39; 查看版本
select version(); +-----------+ | version() | +-----------+ | 8.</description></item><item><title>数据库系统概论-介绍</title><link>https://huangkai1008.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-%E4%BB%8B%E7%BB%8D/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-%E4%BB%8B%E7%BB%8D/</guid><description>数据库系统的目的(Purpose of Database Systems) 在早期，数据库应用程序直接建立在文件系统之上，导致一系列的问题
数据冗余和不一致(Data redundancy and inconsistency)
数据访问难度大(Difficulty in accessing data)
数据隔离(Data isolation)
完整性问题(Integrity problems)
完整性约束(Integrity constraints)问题
难以添加新约束和修改约束
原子性更新(Atomicity of updates)
更新失败可能会导致数据库的数据处于不一致的状态，或者只更新了部分数据
例如: 从一方转账给另一方，只会有完成转账和完全没发生转账两种情况，不会出现转账方转账了但是收款方未收到款项的问题
多用户并发访问(Concurrent access by multiple users)
并发访问需要高性能的支持， 而不受控制的并发访问可能会导致数据不一致
安全问题(Security problems)
文件系统难以提供安全保障
数据库系统就是为了解决这些问题产生的
数据模型(Data Models) 组成 一系列用于描述的工具 数据(Data)</description></item><item><title>Golang安装</title><link>https://huangkai1008.github.io/p/golang%E5%AE%89%E8%A3%85/</link><pubDate>Tue, 31 Jul 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/golang%E5%AE%89%E8%A3%85/</guid><description>安装 Platform: Centos7
version: 1.12
安装
cd /opt wget https://studygolang.com/dl/golang/go1.12.4.linux-amd64.tar.gz tar xzvf go1.12.4.linux-amd64.tar.gz # 安装 配置环境变量
vim ~/.zshrc # 如果用bash就是vim ~/.bashrc # 追加golang配置 export GOROOT=/opt/go export PATH=$PATH:$GOROOT/bin # 立即生效 source ~/.zshrc # 查看版本 go version</description></item><item><title>扩展Python Json Encoder</title><link>https://huangkai1008.github.io/p/%E6%89%A9%E5%B1%95python-json-encoder/</link><pubDate>Mon, 09 Apr 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%89%A9%E5%B1%95python-json-encoder/</guid><description>Python默认的json模块序列化并不是很全面，只能序列化基本的数据类型, 像一些时间格式或者自定义类型都不能序列化，所以在有些时候需要扩展json模块的json encoder
扩展 import datetime as dt import decimal import json import enum from collections.abc import Iterator class ExtendedEncoder(json.JSONEncoder): def default(self, o): if isinstance(o, dt.datetime): return o.strftime(&amp;#39;%Y-%m-%d%H:%M:%S&amp;#39;) elif isinstance(o, dt.date): return o.strftime(&amp;#39;%Y-%m-%d&amp;#39;) elif isinstance(o, decimal.Decimal): return float(o) elif isinstance(o, Iterator): return list(o) elif isinstance(o, enum.Enum): return o.value return json.JSONEncoder.default(self, o) 使用场景 日常格式化
例如对于日期格式的格式化
import datetime as dt now = dt.datetime.now() 对于now如果使用json.dumps(t_now)便会触发TypeError: Object of type datetime is not JSON serializable使用扩展的Encoder</description></item><item><title>Python线程池使用</title><link>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 08 Feb 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</guid><description>介绍 从Python3.2开始，标准库为我们提供了 concurrent.futures 模块，它提供了 ThreadPoolExecutor (线程池)和ProcessPoolExecutor (进程池)两个类。
相比 threading 等模块，该模块通过 submit 返回的是一个 future 对象，它是一个未来可期的对象，通过它可以获悉线程的状态主线程(或进程)中可以获取某一个线程(进程)执行的状态或者某一个任务执行的状态及返回值：
1.主线程可以获取某一个线程（或者任务的）的状态，以及返回值。
2.当一个线程完成的时候，主线程能够立即知道。
3.让多线程和多进程的编码接口一致。
基本使用 from concurrent.futures import ThreadPoolExecutor import time def get_page(url): time.sleep(url) return url with ThreadPoolExecutor(max_workers=5) as t: # 创建一个最大容纳数量为5的线程池 task1 = t.submit(get_page, 1) task2 = t.submit(get_page, 2) # 通过submit提交执行的函数到线程池中 task3 = t.submit(get_page, 3) print(f&amp;#34;task1: {task1.done()}&amp;#34;) # 通过done来判断线程是否完成 print(f&amp;#34;task2: {task2.done()}&amp;#34;) print(f&amp;#34;task3: {task3.done()}&amp;#34;) time.sleep(2.5) print(f&amp;#34;task1: {task1.done()}&amp;#34;) print(f&amp;#34;task2: {task2.done()}&amp;#34;) print(f&amp;#34;task3: {task3.done()}&amp;#34;) print(task1.result()) # 通过result来获取返回值 &amp;gt;&amp;gt;&amp;gt; task1: False task2: False task3: False .</description></item><item><title>Docker安装</title><link>https://huangkai1008.github.io/p/docker%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 31 Jan 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/docker%E5%AE%89%E8%A3%85/</guid><description>Platform: centos7
version: 5.0
安装 Uninstall old versions
sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine Install Docker CE
sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 # 设置stable源 sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo # 安装Docker CE sudo yum install docker-ce docker-ce-cli containerd.</description></item><item><title>Sqlalchemy使用注意</title><link>https://huangkai1008.github.io/p/sqlalchemy%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</link><pubDate>Wed, 14 Jun 2017 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/sqlalchemy%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</guid><description>遇到in查询之类的批量删除或者更新，可以使用synchronize_session=False
db.session.delete(synchronize_session=False) 使用find_in_set
from sqlalchemy.sql.expression import func db.session.query(Post).filter(func.find_in_set(&amp;#39;10&amp;#39;, Post.c.tag_id)) 批量增加删除
db.session.add_all(instances) db.session.delete_all(instances) Mysql IS NULL判断
isnot() is_() Mysql 联合主键
from sqlalchemy import PrimaryKeyConstraint class Node(Model): __table_args__ = ( PrimaryKeyConstraint(&amp;#39;pk1&amp;#39;, &amp;#39;pk2&amp;#39;), ) Flask_sqlalchemy支持Double精度类型字段
from sqlalchemy import Column from sqlalchemy.dialects.mysql import DOUBLE from app import db class BaseModel(Model): id = db.Column(db.Integer, primary_key=True) # Flask_sqlalchemy double_column = Column(DOUBLE, comment=&amp;#39;双精度字段&amp;#39;) # Sqlalchemy mysql double column subquery使用实例</description></item><item><title>Python安装</title><link>https://huangkai1008.github.io/p/python%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 08 Jan 2017 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E5%AE%89%E8%A3%85/</guid><description>Python安装 Platform: centos7
Version: 3.7
安装编译环境
yum install zlib-devel bzip2-devel openssl-devel ncurses-devel libffi-devel 下载
wget --no-check-certificate https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz 创建安装目录解压
sudo mkdir /usr/local/python3 tar -zxvf Python-3.7.4.tgz cd Python-3.7.4/ 编译安装
sudo ./configure --prefix=/usr/local/python3 # 指定创建的目录 make &amp;amp;&amp;amp; make install # 编译安装 软链接 创建python和pip软链接 ln -s /usr/local/python3/bin/python3 /usr/bin/python3 # python3 软链接 ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 # pip3软链接 ln -s /usr/local/python3/bin/pipenv /usr/bin/pipenv # pipenv软链接 使用pyenv管理多个Python版本 安装pyenv 安装脚本 curl https://pyenv.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Huanghuang's Blog</title><link>https://huangkai1008.github.io/</link><description>Recent content on Huanghuang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 14 Jun 2020 16:02:15 +0800</lastBuildDate><atom:link href="https://huangkai1008.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>HTTP</title><link>https://huangkai1008.github.io/p/http/</link><pubDate>Sun, 14 Jun 2020 16:02:15 +0800</pubDate><guid>https://huangkai1008.github.io/p/http/</guid><description>&lt;h1 id="dns-和域名">DNS 和域名&lt;/h1>
&lt;h2 id="一域名">一、域名&lt;/h2>
&lt;p>&lt;strong>网域名称&lt;/strong>（英语：Domain Name，简称：Domain），简称&lt;strong>域名&lt;/strong>、&lt;strong>网域&lt;/strong>，是由一串用点分隔的字符组成的互联网上某一台计算机或计算机组的名称，用于在数据传输时标识计算机的电子方位。域名可以说是一个&lt;a class="link" href="IP.md" >IP&lt;/a>地址的代称，目的是为了便于记忆后者。&lt;/p>
&lt;h3 id="域名的层级">域名的层级&lt;/h3>
&lt;p>&lt;code>www.example.com&lt;/code> 真正的域名是 &lt;code>www.example.com.root&lt;/code> ，简写为 &lt;code>www.example.com.&lt;/code> 。因为，根域名 &lt;code>.root&lt;/code> 对于所有域名都是一样的，所以平时是省略的。&lt;/p>
&lt;p>根域名的下一级，叫做&lt;strong>顶级域名（&lt;code>top-level domain，缩写为TLD&lt;/code>）&lt;/strong>，比如 &lt;code>.com&lt;/code> 、 &lt;code>.net&lt;/code> ；再下一级叫做&lt;strong>次级域名（&lt;code>second-level domain，缩写为SLD&lt;/code>）&lt;/strong>，比如 &lt;code>www.example.com&lt;/code> 里面的 &lt;code>.example&lt;/code> ，这一级域名是用户可以注册的；再下一级是&lt;strong>主机名（&lt;code>host&lt;/code>）&lt;/strong>，比如&lt;code>www.example.com&lt;/code>里面的&lt;code>www&lt;/code>，又称为&lt;strong>三级域名&lt;/strong>，这是用户在自己的域里面为服务器分配的名称，是用户可以任意分配的。&lt;/p>
&lt;blockquote>
&lt;p>主机名.次级域名.顶级域名.根域名
host.sld.tld.root&lt;/p>
&lt;/blockquote>
&lt;h2 id="二dns">二、DNS&lt;/h2>
&lt;p>&lt;strong>域名系统&lt;/strong>（英语：&lt;strong>D&lt;/strong>omain &lt;strong>N&lt;/strong>ame &lt;strong>S&lt;/strong>ystem，缩写：&lt;strong>DNS&lt;/strong>）是一个分布式数据库，提供了&lt;strong>域名&lt;/strong>和 &lt;a class="link" href="IP.md" >IP&lt;/a>地址之间相互转换的服务。&lt;/p>
&lt;h3 id="查询过程">查询过程&lt;/h3>
&lt;p>DNS 服务器根据&lt;a class="link" href="#%e5%9f%9f%e5%90%8d%e7%9a%84%e5%b1%82%e7%ba%a7" >域名的层级&lt;/a>，进行&lt;strong>分级查询&lt;/strong>。&lt;/p>
&lt;p>每一级域名都有自己的&lt;strong>NS（&lt;code>Name Server&lt;/code>）&lt;/strong> 记录，NS记录指向该级域名的域名服务器。这些服务器知道下一级域名的各种记录。&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;分级查询&amp;rdquo;，就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址&lt;/p>
&lt;p>过程大致为:&lt;/p>
&lt;ol>
&lt;li>从&amp;quot;根域名服务器&amp;quot;查到&amp;quot;顶级域名服务器&amp;quot;的NS记录和A记录（IP地址）&lt;/li>
&lt;li>从&amp;quot;顶级域名服务器&amp;quot;查到&amp;quot;次级域名服务器&amp;quot;的NS记录和A记录（IP地址）&lt;/li>
&lt;li>从&amp;quot;次级域名服务器&amp;quot;查出&amp;quot;主机名&amp;quot;的IP地址&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">dig math.stackexchange.com
&lt;span class="p">;&lt;/span> &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.3-1ubuntu1.15-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; math.stackexchange.com
&lt;span class="p">;;&lt;/span> global options: +cmd
&lt;span class="p">;;&lt;/span> Got answer:
&lt;span class="p">;;&lt;/span> -&amp;gt;&amp;gt;HEADER&lt;span class="s">&amp;lt;&amp;lt;- opco&lt;/span>de: QUERY, status: NOERROR, id: &lt;span class="m">50719&lt;/span>
&lt;span class="p">;;&lt;/span> flags: qr rd ra&lt;span class="p">;&lt;/span> QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: &lt;span class="m">1&lt;/span>
&lt;span class="p">;;&lt;/span> OPT PSEUDOSECTION:
&lt;span class="p">;&lt;/span> EDNS: version: 0, flags:&lt;span class="p">;&lt;/span> udp: &lt;span class="m">65494&lt;/span>
&lt;span class="p">;;&lt;/span> QUESTION SECTION:
&lt;span class="p">;&lt;/span>math.stackexchange.com. IN A
&lt;span class="p">;;&lt;/span> ANSWER SECTION:
math.stackexchange.com. &lt;span class="m">600&lt;/span> IN A 151.101.193.69
math.stackexchange.com. &lt;span class="m">600&lt;/span> IN A 151.101.129.69
math.stackexchange.com. &lt;span class="m">600&lt;/span> IN A 151.101.65.69
math.stackexchange.com. &lt;span class="m">600&lt;/span> IN A 151.101.1.69
&lt;span class="p">;;&lt;/span> Query time: &lt;span class="m">74&lt;/span> msec
&lt;span class="p">;;&lt;/span> SERVER: 127.0.0.53#53&lt;span class="o">(&lt;/span>127.0.0.53&lt;span class="o">)&lt;/span>
&lt;span class="p">;;&lt;/span> WHEN: Mon Sep &lt;span class="m">13&lt;/span> 10:18:12 UTC &lt;span class="m">2021&lt;/span>
&lt;span class="p">;;&lt;/span> MSG SIZE rcvd: &lt;span class="m">115&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="记录类型">记录类型&lt;/h3>
&lt;p>域名与IP之间的对应关系，称为&lt;strong>记录（&lt;code>record&lt;/code>）&lt;/strong>。根据使用场景，&lt;strong>记录&lt;/strong>可以分成不同的&lt;strong>类型（&lt;code>type&lt;/code>）&lt;/strong>。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">记录类型&lt;/th>
&lt;th style="text-align:center">记录类型简称&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>地址记录（&lt;code>Address&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>A&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回域名指向的IP地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>域名服务器记录（&lt;code>Name Server&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>NS&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回保存下一级域名信息的服务器地址。该记录只能设置为域名，不能设置为IP地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>邮件记录（&lt;code>Mail eXchange&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>MX&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回接收电子邮件的服务器地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>规范名称记录（&lt;code>Canonical Name&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>CNAME&lt;/code>&lt;/td>
&lt;td style="text-align:center">返回另一个域名，即当前查询的域名是另一个域名的跳转&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>逆向查询记录（&lt;code>Pointer Record&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">&lt;code>PTR&lt;/code>&lt;/td>
&lt;td style="text-align:center">只用于从IP地址查询域名&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="传输方式">传输方式&lt;/h3>
&lt;p>DNS 可以使用 &lt;strong>UDP&lt;/strong> 或者 &lt;strong>TCP&lt;/strong> 进行传输，&lt;strong>使用的端口号都为 53&lt;/strong>。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传从而保证可靠性。在两种情况下会使用 TCP 进行传输：&lt;/p>
&lt;ul>
&lt;li>如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）&lt;/li>
&lt;li>区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）&lt;/li>
&lt;/ul></description></item><item><title>HTTP</title><link>https://huangkai1008.github.io/p/http/</link><pubDate>Fri, 12 Jun 2020 12:22:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/http/</guid><description>&lt;h1 id="http">HTTP&lt;/h1>
&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;h3 id="请求和响应报文">请求和响应报文&lt;/h3>
&lt;p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。&lt;/p>
&lt;h4 id="请求消息requests">&lt;strong>请求消息（&lt;code>requests&lt;/code>）&lt;/strong>&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="nf">GET&lt;/span> &lt;span class="nn">/&lt;/span> &lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span>
&lt;span class="n">Host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">developer.mozilla.org&lt;/span>
&lt;span class="n">Accept-Language&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">fr&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>起始行（&lt;code>start line&lt;/code>）&lt;/strong>：包含一个&lt;a class="link" href="#%e4%ba%8c%e3%80%81HTTP%e6%96%b9%e6%b3%95" >HTTP方法（&lt;code>method&lt;/code>）&lt;/a>、&lt;strong>请求目标（&lt;code>request target&lt;/code>）&lt;/strong> 和 &lt;strong>HTTP 版本 （&lt;code>HTTP version&lt;/code>）&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消息头（&lt;code>headers&lt;/code>）&lt;/strong>： 整个 header（包括其值）表现为单行形式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个空行用来分隔首部和内容主体 Body&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>消息主体（&lt;code>body&lt;/code>）&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210906175921.png" alt="HTTP Requests Example" />&lt;/p>
&lt;hr>
&lt;/li>
&lt;/ul>
&lt;h4 id="响应消息responses">&lt;strong>响应消息(&lt;code>responses&lt;/code>)&lt;/strong>&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="kr">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span> &lt;span class="m">200&lt;/span> &lt;span class="ne">OK&lt;/span>
&lt;span class="n">Date&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Sat, 09 Oct 2010 14:28:02 GMT&lt;/span>
&lt;span class="n">Server&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Apache&lt;/span>
&lt;span class="n">Last-Modified&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">Tue, 01 Dec 2009 20:18:22 GMT&lt;/span>
&lt;span class="n">ETag&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">&amp;#34;51142bc1-7449-479b075b2891b&amp;#34;&lt;/span>
&lt;span class="n">Accept-Ranges&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">bytes&lt;/span>
&lt;span class="n">Content-Length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">29769&lt;/span>
&lt;span class="n">Content-Type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="l">text/html&lt;/span>
&lt;span class="err">&amp;lt;&lt;/span>!DOCTYPE html... (here comes the 29769 bytes of the requested web page)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>状态行（&lt;code>status line&lt;/code>)&lt;/strong>：
&lt;ul>
&lt;li>协议版本，通常为 &lt;code>HTTP/1.1&lt;/code>.&lt;/li>
&lt;li>&lt;strong>状态码 (&lt;code>status code&lt;/code>)&lt;/strong>，表明请求是成功或失败。常见的状态码是 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200" target="_blank" rel="noopener"
>&lt;code>200&lt;/code>&lt;/a>，&lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404" target="_blank" rel="noopener"
>&lt;code>404&lt;/code>&lt;/a>，或 &lt;a class="link" href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/302" target="_blank" rel="noopener"
>&lt;code>302&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;strong>状态文本 (&lt;code>status text&lt;/code>)&lt;/strong>：一个简短的，纯粹的信息，通过状态码的文本描述，帮助理解该 HTTP 消息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>消息头（&lt;code>Headers&lt;/code>）&lt;/strong>： 整个 header（包括其值）表现为单行形式&lt;/li>
&lt;li>&lt;strong>一个空行&lt;/strong>用来分隔首部和内容主体 Body&lt;/li>
&lt;li>&lt;strong>消息主体（&lt;code>body&lt;/code>）&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210906205815.png" alt="HTTP Responses Example" />&lt;/p>
&lt;hr>
&lt;h2 id="二http-方法">二、HTTP 方法&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">请求方法&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;th style="text-align:center">RFC&lt;/th>
&lt;th style="text-align:center">请求具有请求实体&lt;/th>
&lt;th style="text-align:center">响应具有响应实体&lt;/th>
&lt;th style="text-align:center">安全方法&lt;/th>
&lt;th style="text-align:center">是否幂等&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>GET&lt;/strong>&lt;/td>
&lt;td style="text-align:center">请求一个指定的资源&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>HEAD&lt;/strong>&lt;/td>
&lt;td style="text-align:center">获取报文首部，不返回报文实体主体，主要用于确认 URL 的有效性以及资源更新的日期时间等&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>POST&lt;/strong>&lt;/td>
&lt;td style="text-align:center">用于将实体提交到指定的资源&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>PUT&lt;/strong>&lt;/td>
&lt;td style="text-align:center">向指定资源位置上传其最新内容&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>PATCH&lt;/strong>&lt;/td>
&lt;td style="text-align:center">对资源进行部分修改&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc5789" target="_blank" rel="noopener"
>5789&lt;/a>&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>DELETE&lt;/strong>&lt;/td>
&lt;td style="text-align:center">删除指定的资源&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>CONNECT&lt;/strong>&lt;/td>
&lt;td style="text-align:center">要求在与代理服务器通信时建立隧道&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>OPTIONS&lt;/strong>&lt;/td>
&lt;td style="text-align:center">查询指定的 URL 能够支持的方法&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">可选&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>TRACE&lt;/strong>&lt;/td>
&lt;td style="text-align:center">服务器会将通信路径返回给客户端&lt;/td>
&lt;td style="text-align:center">&lt;a class="link" href="https://en.wikipedia.org/wiki/RFC_%28identifier%29" target="_blank" rel="noopener"
>RFC&lt;/a> &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7231" target="_blank" rel="noopener"
>7231&lt;/a>&lt;/td>
&lt;td style="text-align:center">否&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;td style="text-align:center">是&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="三http-首部header">三、HTTP 首部（&lt;code>header&lt;/code>)&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">类型&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;th style="text-align:center">实例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>通用头（&lt;code>General headers&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">适用于请求和响应信息的头字段&lt;/td>
&lt;td style="text-align:center">&lt;code>Date&lt;/code>,&lt;code>Cache-Control&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>请求头（&lt;code>Request headers&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">用于表示请求信息的附加信息的头字段&lt;/td>
&lt;td style="text-align:center">&lt;code>Authorization&lt;/code>,&lt;code>User-Agent&lt;/code>,&lt;code>Accept-Encoding&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>响应头（&lt;code>Response headers&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">用于表示响应信息的附加信息的头字段&lt;/td>
&lt;td style="text-align:center">&lt;code>Location&lt;/code>,&lt;code>Server&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>实体头（&lt;code>Entity headers&lt;/code>）&lt;/strong>&lt;/td>
&lt;td style="text-align:center">用于表示实体（消息体）的附加信息的头字段&lt;/td>
&lt;td style="text-align:center">&lt;code>Allow&lt;/code>,&lt;code>Content-Encoding&lt;/code>,&lt;code>Expires&lt;/code>, &lt;code>Etag&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="四http-状态码status-code">四、HTTP 状态码（&lt;code>status code&lt;/code>）&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">状态码&lt;/th>
&lt;th style="text-align:center">含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1xx(&lt;em>informational response&lt;/em>)&lt;/td>
&lt;td style="text-align:center">告知请求的处理进度和情况&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2xx(&lt;em>successful&lt;/em>)&lt;/td>
&lt;td style="text-align:center">成功&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">3xx(&lt;em>redirection&lt;/em>)&lt;/td>
&lt;td style="text-align:center">需要进一步处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">4xx(&lt;em>client error&lt;/em>)&lt;/td>
&lt;td style="text-align:center">客户端错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5xx(&lt;em>server error&lt;/em>)&lt;/td>
&lt;td style="text-align:center">服务器错误&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>【日】户根勤. (2017). 网络是怎样连接的. 人民邮电出版社.&lt;/li>
&lt;li>&lt;a class="link" href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener"
>Wikipedia : HTTP&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/HTTP" target="_blank" rel="noopener"
>MDN : HTTP&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>MySQL的日志系统</title><link>https://huangkai1008.github.io/p/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 05 Jun 2020 22:07:21 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E7%9A%84%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h2 id="日志类型">日志类型&lt;/h2>
&lt;blockquote>
&lt;p>​ MySQL主要有两种日志类型，一种是&lt;code>物理日志&lt;/code>（记录在某个数据页上做了什么修改)，一种是&lt;code>逻辑日志&lt;/code>(存储了逻辑SQL修改语句)。&lt;code>redo log&lt;/code>属于物理日志，&lt;code>binlog&lt;/code>和&lt;code>undo log&lt;/code>属于逻辑日志，其中物理日志的恢复速度远快于逻辑日志。&lt;/p>
&lt;p>&lt;code>redo log&lt;/code>和&lt;code>undo log&lt;/code>都属于&lt;code>InnoDB&lt;/code>引擎层下的&lt;code>事务日志（transaction log）&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="重做日志--redo-log">重做日志 (redo log)&lt;/h2>
&lt;h3 id="预写式技术-write-ahead-logging-wal">预写式技术 (Write Ahead logging, WAL)&lt;/h3>
&lt;blockquote>
&lt;p>​ InnoDB 引擎对数据更新，是先将更新记录写入到重做日志，在系统空闲时或者按照设定的更新策略再将日志中的内容更新到磁盘中，这就是&lt;code>预写式技术 (Write Ahead logging, WAL)&lt;/code>，这种技术可以大大减少IO操作的频率，提升数据刷新的效率。&lt;/p>
&lt;/blockquote>
&lt;h3 id="重做日志的策略">重做日志的策略&lt;/h3>
&lt;blockquote>
&lt;p>​ 重做日志（redo log）是 InnoDB 引擎层的日志，用来记录事务操作引起数据的变化，记录的是数据页的物理修改，提供&lt;code>前滚&lt;/code>操作，&lt;code>redo log 保证事务的持久性&lt;/code>。重做日志由两部分组成，一是内存中的&lt;code>重做日志缓冲区 (redo log buffer)&lt;/code>，因为重做日志缓冲区在内存中，所以它是&lt;code>易失的&lt;/code>，另一个就是在磁盘上的&lt;code>重做日志文件 (redo log file)&lt;/code>，它是持久的。&lt;/p>
&lt;/blockquote>
&lt;p>​ 当我们在一个事务中尝试对数据进行修改时，它会先将数据从磁盘读入内存，并更新内存中缓存的数据，然后生成一条重做日志并写入重做日志缓存，当事务真正提交时，MySQL 会将重做日志缓存中的内容刷新到重做日志文件，再将内存中的数据更新到磁盘上。&lt;/p>
&lt;p>​ 值得注意的是，redo log 的大小是固定的，为了能够持续不断的对更新记录进行写入，在redo log日志中设置了两个标志位置，&lt;code>checkpoint&lt;/code>和&lt;code>write pos&lt;/code>。&lt;code>checkpoint&lt;/code>表示记录擦除的位置，&lt;code>write pos&lt;/code>表示记录写入的位置。当&lt;code>write pos&lt;/code>标志到了日志结尾时，会从结尾跳至日志头部循环写入，所以redo log的逻辑结构并不是线性的，可以看做一个圆周运动，逻辑结构见下图：&lt;/p>
&lt;p>&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210413231000.png" alt="" />&lt;/p>
&lt;p>​ 当&lt;code>write_pos&lt;/code>追上&lt;code>checkpoint&lt;/code>时，表示redo log日志已经写满。这时不能继续执行新的数据库更新语句，需要停下来先删除一些记录，执行&lt;code>checkpoint&lt;/code>规则腾出可写空间。&lt;/p>
&lt;blockquote>
&lt;p>checkpoint规则: checkpoint触发后，将buffer中脏数据页和脏日志页都刷到磁盘。所谓的脏数据页就是指内存中未刷到磁盘的数据&lt;/p>
&lt;/blockquote>
&lt;p>​ redo log中最重要的概念就是缓冲池&lt;code>buffer pool&lt;/code>，这是在内存中分配的一个区域，包含了磁盘中部分数据页的映射，作为访问数据库的缓冲。当请求读取数据时，会先判断是否在缓冲池命中，如果未命中才会在磁盘上进行检索后放入缓冲池；当请求写入数据时，会先写入缓冲池，缓冲池中修改的数据会定期刷新到磁盘中。这一过程也被称之为&lt;strong>刷脏&lt;/strong> 。&lt;/p>
&lt;p>​ 因此，当数据修改时，除了修改&lt;code>buffer pool&lt;/code>中的数据，还会在redo log中记录这次操作；当事务提交时，会根据redo log的记录对数据进行刷盘。如果MySQL宕机，重启时可以读取redo log中的数据，对数据库进行恢复，从而保证了事务的持久性，使得数据库获得&lt;code>crash-safe&lt;/code>能力。&lt;/p>
&lt;h2 id="回滚日志-undo-log">回滚日志 (undo log)&lt;/h2>
&lt;blockquote>
&lt;p>​ 回滚日志的作用就是对数据进行回滚。当事务对数据库进行修改，InnoDB引擎不仅会记录redo log，还会生成对应的undo log日志；如果事务执行失败或调用了rollback，导致事务需要回滚，就可以利用undo log中的信息将数据回滚到修改之前的状态。&lt;/p>
&lt;p>​ 但是undo log和redo log不一样，它属于逻辑日志。它对SQL语句执行相关的信息进行记录。当发生回滚时，InnoDB引擎会根据undo log日志中的记录做与之前相反的工作。比如对于每个数据插入操作（insert），回滚时会执行数据删除操作（delete）；对于每个数据删除操作（delete），回滚时会执行数据插入操作（insert）；对于每个数据更新操作（update），回滚时会执行一个相反的数据更新操作（update），把数据改回去。undo log有两个作用，一是提供&lt;code>回滚&lt;/code>，二是实现&lt;code>MVCC&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="二进制日志-binlog">二进制日志 (binlog)&lt;/h2>
&lt;blockquote>
&lt;p>​ 二进制日志binlog是服务层的日志，还被称为归档日志。binlog主要记录数据库的变化情况，内容包括数据库所有的更新操作。所有涉及数据变动的操作，都要记录进二进制日志中。因此有了binlog可以很方便的对数据进行复制和备份，因而也常用作主从库的同步。&lt;/p>
&lt;/blockquote></description></item><item><title>事务</title><link>https://huangkai1008.github.io/p/%E4%BA%8B%E5%8A%A1/</link><pubDate>Tue, 02 Jun 2020 22:25:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E4%BA%8B%E5%8A%A1/</guid><description>&lt;h2 id="概念">概念&lt;/h2>
&lt;blockquote>
&lt;p>事务就是一组原子性的SQL查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。&lt;strong>在 MySQL 中，事务支持是在引擎层实现的。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="acid特性">ACID特性&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>原子性（Atomicity）&lt;/strong>：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>一致性（Consistency）&lt;/strong>：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>隔离性（Isolation）&lt;/strong>：&lt;strong>通常来说&lt;/strong>，一个事务所做的修改在最终提交以前，对其他事务是不可见的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持久性（Durability）&lt;/strong>：已被提交的事务对数据库的修改应该永久保存在数据库中。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>一个实现了ACID的数据库，相比没有实现ACID的数据库，通常会需要更强的CPU处理能力、更大的内存和更多的磁盘空间。&lt;/p>
&lt;/blockquote>
&lt;h2 id="隔离级别isolation-level">隔离级别（Isolation level）&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>READ UNCOMMITTED（读未提交）&lt;/strong>&lt;/p>
&lt;p>​ 事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为&lt;code>脏读（Dirty Read）&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>READ COMMITTED（读提交）&lt;/strong>&lt;/p>
&lt;p>​ Oracle和SQL Server的默认隔离级别。一个事务可以读取另一个已提交的事务。换句话说，一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。这个级别有时候也叫做不可重复读（nonrepeatable read），因为两次执行同样的查询，可能会得到不一样的结果。MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>REPEATABLE READ（可重复读）&lt;/strong>&lt;/p>
&lt;p>​ &lt;strong>MySQL的默认隔离级别&lt;/strong>。一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。&lt;strong>MySQL的InnoDB引擎在提交读级别通过MVCC解决了不可重复读的问题，在可重复读级别通过间隙锁解决了幻读问题&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SERIALIZABLE（可串行化）&lt;/strong>&lt;/p>
&lt;p>​ SERIALIZABLE是最高的隔离级别。它通过强制事务串行执行，避免了前面说的幻读的问题。简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用的问题。实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才考虑采用该级别。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">隔离级别&lt;/th>
&lt;th style="text-align:center">脏读可能性&lt;/th>
&lt;th style="text-align:center">不可重复读可能性&lt;/th>
&lt;th style="text-align:center">幻读可能性&lt;/th>
&lt;th style="text-align:center">加锁读&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">READ UNCOMMITTED&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">READ COMMITTED&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">REPEATABLE READ&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">SERIALIZABLE&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">×&lt;/td>
&lt;td style="text-align:center">√&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>查看MySQL的隔离级别&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SHOW&lt;/span> &lt;span class="n">VARIABLES&lt;/span> &lt;span class="k">LIKE&lt;/span> &lt;span class="s1">&amp;#39;transaction_isolation&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">+-----------------------+-----------------+&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">Variable_name&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+-----------------------+-----------------+&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">transaction_isolation&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">REPEATABLE&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">READ&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+-----------------------+-----------------+&lt;/span>
&lt;span class="mi">1&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="kt">set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="nf">warning&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>设置当前会话的隔离级别&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="kt">SET&lt;/span> &lt;span class="n">SESSION&lt;/span> &lt;span class="n">TRANSACTION&lt;/span> &lt;span class="n">ISOLATION&lt;/span> &lt;span class="n">LEVEL&lt;/span> &lt;span class="k">READ&lt;/span> &lt;span class="n">COMMITTED&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 设置当前会话为RC级别，下个事务生效
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="事务类型">事务类型&lt;/h2>
&lt;h3 id="隐式事务">隐式事务&lt;/h3>
&lt;p>DML操作的语句都会隐式的开启事务，并且在语句执行后没有错误的话隐式提交。可以通过将MySQL的&lt;code>autocommit&lt;/code>这个变量（默认为1）设置为0将事务的&lt;code>隐式提交&lt;/code>关闭，但需要注意，DML语句的隐式事务仍会启动，只是区别在于需要手动COMMIT显式提交这个事务，也就是将隐式事务转化为长事务了。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">SHOW&lt;/span> &lt;span class="n">VARIABLES&lt;/span> &lt;span class="k">LIKE&lt;/span> &lt;span class="s1">&amp;#39;autocommit&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 查看隐式事务提交方式
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="o">+---------------+-------+&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">Variable_name&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+---------------+-------+&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">autocommit&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="k">ON&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+---------------+-------+&lt;/span>
&lt;span class="mi">1&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="kt">set&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="nf">warning&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="显式事务">显式事务&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="c1"># 1.显式开启一个事务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">START&lt;/span> &lt;span class="n">TRANSACTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">BEGIN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 2.提交事务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 3.回滚事务
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">ROLLBACK&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 4.在事务中创建保存点，可以在同一事务中创建多个，以便通过ROLLBACK更灵活的回滚
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">SAVEPOINT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>显式开启一个事务时，如果还有未提交的事务会自动提交，并且&lt;code>autocommit&lt;/code>会被禁用直到该事务结束。对于显式事务，存在&lt;code>completion_type&lt;/code>这样一个变量控制显式事务的行为。有下列三种情况：&lt;/p>
&lt;ul>
&lt;li>值为0时即为默认，执行COMMIT后提交该显式事务并结束该事务。&lt;/li>
&lt;li>值为1时，执行COMMIT后除了有值为0时的默认行为外，随后会自动开始一个相同隔离级别的事务。术语为&lt;code>COMMIT AND CHAIN&lt;/code>&lt;/li>
&lt;li>值为2时，执行COMMIT后除了有值为0时的默认行为外，随后会断开与服务器的连接。术语为&lt;code>COMMIT AND RELEASE&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>MySQL的基础架构</title><link>https://huangkai1008.github.io/p/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jun 2020 21:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid><description>&lt;h2 id="逻辑架构">逻辑架构&lt;/h2>
&lt;p>MySQL可以大体分为&lt;code>Server层&lt;/code>和&lt;code>存储引擎层&lt;/code>两部分, 见图1&lt;/p>
&lt;p>&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210413133932.png" alt="图1 Mysql逻辑架构图" />&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;ul>
&lt;li>&lt;strong>Server 层&lt;/strong>包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。&lt;/li>
&lt;li>&lt;strong>存储引擎层&lt;/strong>负责数据的存储和提取。其架构模式是&lt;code>插件式&lt;/code>的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 &lt;code>InnoDB&lt;/code>，它从 MySQL 5.5.5 版本开始成为了默认存储引擎&lt;/li>
&lt;/ul>
&lt;h3 id="连接器connector">连接器(Connector)&lt;/h3>
&lt;p>​ 连接器负责和客户端建立连接、获取权限、维持和管理连接。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="c1"># Mysql连接命令
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">mysql&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">ip&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">P&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="n">port&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="k">user&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>MySQL客户端和服务端完成TCP握手后，连接器需要认证身份&lt;/p>
&lt;ul>
&lt;li>如果用户名或密码不对，你就会收到一个&amp;quot;Access denied for user&amp;quot;的错误，然后客户端程序结束执行。&lt;/li>
&lt;li>如果用户名密码认证通过，连接器会到权限表里面查出拥有的权限，之后这个连接里面的权限判断逻辑，都将依赖于此时读到的权限，这就意味着，一个用户成功建立连接后，即使这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。&lt;/li>
&lt;/ul>
&lt;h3 id="查询缓存query-cache">查询缓存(Query Cache)&lt;/h3>
&lt;p>​ 在连接建立完成后，MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。&lt;/p>
&lt;blockquote>
&lt;p>MySQL 8.0 版本的查询缓存功能被移除了&lt;/p>
&lt;/blockquote>
&lt;h3 id="分析器parser">分析器(Parser)&lt;/h3>
&lt;p>分析器的主要功能是对SQL语句做解析&lt;/p>
&lt;ul>
&lt;li>分析器会先做&lt;code>词法分析&lt;/code>，再做&lt;code>语法分析&lt;/code>，语法分析器会根据语法规则，判断 SQL 语句是否满足 MySQL 语法&lt;/li>
&lt;/ul>
&lt;h3 id="优化器query-optimizer">优化器(Query Optimizer)&lt;/h3>
&lt;p>​ 优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。优化器并不关心表使用的是什么存储引擎，但存储引擎对于优化查询是有影响的。优化器会请求存储引擎提供容量或某个具体操作的开销信息，以及表数据的统计信息等。例如，某些存储引擎的某种索引，可能对一些特定的查询有优化。&lt;/p>
&lt;h3 id="执行器query-execution-engine">执行器(Query execution engine)&lt;/h3>
&lt;p>​ 开始执行的时候，要先判断一下对于表有没有执行操作的权限，如果没有，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。&lt;/p>
&lt;p>对于一个特定的例子&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">select&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="k">user&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>假定ID字段没有索引，那么执行器的执行流程是这样的：&lt;/p>
&lt;ol>
&lt;li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；&lt;/li>
&lt;li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。&lt;/li>
&lt;li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。&lt;/li>
&lt;/ol></description></item><item><title>Awesome Software</title><link>https://huangkai1008.github.io/p/awesome-software/</link><pubDate>Sun, 01 Dec 2019 22:21:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/awesome-software/</guid><description>&lt;h2 id="ide">IDE&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Jetbrains&lt;/code>系列&lt;/li>
&lt;/ul>
&lt;h2 id="editor">Editor&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Vscode&lt;/code>&lt;/li>
&lt;li>&lt;code>Sublime text&lt;/code>&lt;/li>
&lt;li>&lt;code>Typora&lt;/code>(markdown编辑)&lt;/li>
&lt;li>&lt;code>Notion&lt;/code>(笔记软件)&lt;/li>
&lt;/ul>
&lt;h2 id="画图">画图&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Microsoft visio&lt;/code>&lt;/li>
&lt;li>&lt;code>drawing.io&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="数据库">数据库&lt;/h2>
&lt;h3 id="mysql系列">Mysql系列&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Navicat&lt;/code>&lt;/li>
&lt;li>&lt;code>Tableplus&lt;/code>&lt;/li>
&lt;li>&lt;code>Jetbrains Datagrip&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="redis系列">Redis系列&lt;/h3>
&lt;ul>
&lt;li>&lt;code>RDM&lt;/code>(redis desktop manager)&lt;/li>
&lt;/ul>
&lt;h2 id="cvs">CVS&lt;/h2>
&lt;ul>
&lt;li>Jetbrains系IDE自带&lt;/li>
&lt;li>&lt;code>SourceTree&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="接口测试">接口测试&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Postman&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="vm">Vm&lt;/h2>
&lt;ul>
&lt;li>&lt;code>VirtualBox&lt;/code>&lt;/li>
&lt;li>&lt;code>Vagrant&lt;/code>&lt;/li>
&lt;li>&lt;code>Windows SubLinux(WSL)&lt;/code>&lt;/li>
&lt;li>&lt;code>Vmware&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="ssh工具">ssh工具&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MobaXterm&lt;/code>&lt;/li>
&lt;li>&lt;code>xshell&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="系统工具">系统工具&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Everything&lt;/code>&lt;/li>
&lt;li>&lt;code>Utools&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="接口文档工具">接口文档工具&lt;/h2>
&lt;ul>
&lt;li>&lt;code>apidoc&lt;/code>&lt;/li>
&lt;li>&lt;code>swagger&lt;/code>&lt;/li>
&lt;li>&lt;code>yapi&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="终端">终端&lt;/h2>
&lt;ul>
&lt;li>&lt;code>cmder&lt;/code>&lt;/li>
&lt;li>&lt;code>Windows Termial&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>日志库Loguru使用教程</title><link>https://huangkai1008.github.io/p/%E6%97%A5%E5%BF%97%E5%BA%93loguru%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link><pubDate>Fri, 22 Nov 2019 15:19:35 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%97%A5%E5%BF%97%E5%BA%93loguru%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid><description>&lt;p>Loguru是一个好用的第三方python日志库&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip install loguru
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初步使用">初步使用&lt;/h2>
&lt;h3 id="添加日志到标准输出流">添加日志到标准输出流&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{time} {level} {message}&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">filter&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;my module&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加日志到文件">添加日志到文件&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;file_1.log&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rotation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;500 MB&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Automatically rotate too big file&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file_2.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rotation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;12:00&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># New file is created each day at noon&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file_3.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rotation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1 week&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Once the file is too old, it&amp;#39;s rotated&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file_X.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">retention&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;10 days&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Cleanup after some time&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file_Y.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">compression&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;zip&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Save some loved space&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="捕获异常">捕获异常&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="nd">@logger.catch&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">my_function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="c1"># An error? It&amp;#39;s caught anyway!&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="为日志添加颜色">为日志添加颜色&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stdout&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">colorize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">format&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;green&amp;gt;{time}&amp;lt;/green&amp;gt; &amp;lt;level&amp;gt;{message}&amp;lt;/level&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="异步线程安全多进程安全">异步、线程安全、多进程安全&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;file.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">enqueue&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="完全描述异常">完全描述异常&lt;/h3>
&lt;blockquote>
&lt;p>记录代码中发生的异常对于跟踪错误很重要，但是如果您不知道为什么失败，则记录日志就毫无用处。
Loguru通过允许显示整个堆栈跟踪（包括变量值）来帮助您发现问题&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;output.log&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">backtrace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">diagnose&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Set &amp;#39;False&amp;#39; to not leak sensitive data in prod&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置到flask">配置到flask&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">pathlib&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Path&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">flask&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Flask&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">loguru&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">logger&lt;/span>
&lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Flask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__name__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">InterceptHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Handler&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">logger_opt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">opt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">depth&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">exception&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exc_info&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logger_opt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">levelname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">record&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getMessage&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">configure_logging&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flask_app&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Flask&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;配置日志&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">flask_app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">config&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;LOG_PATH&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mkdir&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parents&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">log_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Path&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;sips.log&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">basicConfig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handlers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">InterceptHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">)],&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">configure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">handlers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[{&lt;/span>&lt;span class="s2">&amp;#34;sink&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;level&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>&lt;span class="p">}])&lt;/span> &lt;span class="c1"># 配置日志到标准输出流&lt;/span>
&lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">log_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rotation&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;500 MB&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encoding&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">colorize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO&amp;#39;&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="c1"># 配置日志到输出到文件&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Eventlet使用</title><link>https://huangkai1008.github.io/p/eventlet%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 22 Nov 2019 11:20:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/eventlet%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>Evenlet是一个Python的基于携程的网络库，它改变了你代码运行的方式，但是没有改变你怎么写代码&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip install eventlet
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="简单使用">简单使用&lt;/h2>
&lt;h3 id="从eventletgreen导入相关库">从eventlet.green导入相关库&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">eventlet&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">eventlet.green&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">urllib2&lt;/span>
&lt;span class="n">urls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="s2">&amp;#34;https://www.google.com/intl/en_ALL/images/logo.gif&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://python.org/images/python-logo.gif&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;opening&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">body&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">urllib2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urlopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;done with&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">body&lt;/span>
&lt;span class="n">pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">GreenPool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">body&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">imap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fetch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">urls&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;got body from&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;of length&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用spawn使用协程">使用spawn使用协程&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">eventlet&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">green_thread_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">greenthread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s1">&amp;#39;green_thread_1 get result {num}&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">green_thread_2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">greenthread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s1">&amp;#39;green_thread_2 get result {num}&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">y&lt;/span>
&lt;span class="n">time1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">perf_counter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">green_thread_1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">eventlet&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">green_thread_2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">time2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">perf_counter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">time2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">time1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">green_thread_1&lt;/span> &lt;span class="n">get&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">green_thread_2&lt;/span> &lt;span class="n">get&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="mf">2.0049271&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;code>spawn&lt;/code>函数产生的协程可以通过&lt;code>wait&lt;/code>函数来执行并获取返回结果， 如上例子中， 使用绿色线程的休眠模拟io操作的耗时,
程序就会切换到下一个协程，切换协程由调度器决定&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用monkey-patch">使用monkey-patch&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">eventlet&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">monkey_patch&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">eventlet&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">GreenPool&lt;/span>
&lt;span class="n">green_pool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GreenPool&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">monkey_patch&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">producer&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">consumer&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="k">pass&lt;/span>
&lt;span class="n">green_pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">producer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">green_pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">spawn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">consumer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">green_pool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">waitall&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="和gunicorn一起使用">和gunicorn一起使用&lt;/h3>
&lt;p>以flask应用为例&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">gunicorn --worker-class eventlet -b 0.0.0.0:5000 -w &lt;span class="m">1&lt;/span> run:app
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Git工作流</title><link>https://huangkai1008.github.io/p/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Sat, 12 Oct 2019 14:36:49 +0800</pubDate><guid>https://huangkai1008.github.io/p/git%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>&lt;h2 id="gitflow">GitFlow&lt;/h2>
&lt;h3 id="基本介绍">基本介绍&lt;/h3>
&lt;p>Gitflow 提倡使用 &lt;code>feature branches&lt;/code> 模式来开发各个相互独立的功能，同时分成不同的分支以便进行集成和发布&lt;/p>
&lt;p>&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210413133752.jpg" alt="Git Workflow" />&lt;/p>
&lt;h3 id="分支介绍">分支介绍&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>长期分支&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>主分支(master)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发分支(develop)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在gitflow下, &lt;code>develop&lt;/code> 分支是一个类似全能的分支，用来存放、测试所有的代码，同时也是主要是用来合并代码、集成功能的分支&lt;/p>
&lt;p>作为一个开发人员，在这是不允许直接提交代码到 &lt;code>develop&lt;/code> 分支上的，更更更不允许直接提交到 &lt;code>master&lt;/code> 分支。&lt;code>master&lt;/code> 分支代表的是一个「stable」的分支，包含的是已投产或即将投产的代码。如果一段代码在 &lt;code>master&lt;/code> 分支上，即代表它已经投产或即将投产发布&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>短期分支&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>功能分支(feature)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>热补丁分支(hotfix)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>预发分支(release)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>&lt;code>feature&lt;/code>&lt;/p>
&lt;p>功能性分支从 &lt;code>develop&lt;/code> 分支上产生， 根据新需求来新建 &lt;code>feature&lt;/code> 分支， 开发完成后，要再并入 &lt;code>develop&lt;/code> 分支， 合并完分支后一般会删除这个&lt;code>feature&lt;/code>分支&lt;/p>
&lt;p>在 &lt;code>feature&lt;/code> 分支的命名规则上，可以约定以 「feat-」开头，后面跟上问题单编号。如「feat-APS-151-add-name-field」。以「feat-」开头，可以让 CI 服务器识别出这是一个 &lt;code>feature&lt;/code> 分支，「APS-151」是Jira 问题单的编号，可以链接到问题单，剩下的部分则是对该功能的简短的说明&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>release&lt;/code>&lt;/p>
&lt;p>&lt;code>release&lt;/code>分支基于&lt;code>develop&lt;/code>创建&lt;/p>
&lt;p>打完&lt;code>release&lt;/code>分支之后，我们可以在这个&lt;code>release&lt;/code>分支上测试，修改bug等。同时，其它开发人员可以基于&lt;code>develop&lt;/code>分支新建&lt;code>feature&lt;/code> (记住：一旦打了&lt;code>release&lt;/code>分支之后不要从&lt;code>develop&lt;/code>分支上合并新的改动到&lt;code>release&lt;/code>分支)发布&lt;code>release&lt;/code>分支时，合并&lt;code>release&lt;/code>到&lt;code>master&lt;/code>和&lt;code>develop&lt;/code>， 同时在master分支上打个tag记住release版本号，然后可以删除release分支了。它的命名，可以采用release-*的形式&lt;/p>
&lt;p>在测试中，难免发现 bug，我们可以直接在 release 分支上修改，修改完后再 merge 到 develop 分支上（develop 分支包含的是已发布或者即将发布的代码）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>hotfix&lt;/code>&lt;/p>
&lt;p>这个分支是负责在生产环境上发现的问题，如 bug 或者性能问题等。 hotfixes 分支和 release 分支类似，都以 release 版本号命名，唯一的区别就是 hotfixes 是新建于 master 分支，release 分支则是从 develop 分支而来，修补结束以后，再合并进Master和Develop分支。它的命名，可以采用hotfix-*的形式&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p></description></item><item><title>Black安装和使用</title><link>https://huangkai1008.github.io/p/black%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 27 Sep 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/black%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>Black是一个毫不妥协的python代码格式化工具, 特点是可配置项较少
Black依赖于python3.6+, 官方地址在https://github.com/psf/black&lt;/p>
&lt;h2 id="install">Install&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip install black
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configure">Configure&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>pyproject.toml&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">black&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">skip&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">normalization&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="c"># 禁用双引号风格&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>pycharm&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Create external tools&lt;/p>
&lt;blockquote>
&lt;p>windows: File -&amp;gt; Settings -&amp;gt; Tools -&amp;gt; External Tools&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210413134138.png" alt="External Tools" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configure file watcher&lt;/p>
&lt;p>&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210413134203.png" alt="File Watcher" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Poetry安装和使用</title><link>https://huangkai1008.github.io/p/poetry%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 14 Sep 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/poetry%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>custom installer&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py &lt;span class="p">|&lt;/span> python
&lt;span class="nb">source&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.poetry/env
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>pip&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip install poetry &lt;span class="c1"># 不推荐, 可能会有冲突&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>验证安装&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">poetry --version
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用">使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>项目初始化&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从pipenv/pip等工具迁移&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">poetry init &lt;span class="c1"># 进入交互式命令行填写项目信息, 会生成pyproject.toml&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;strong>添加依赖&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>添加包&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">poetry add
poetry add &lt;span class="nv">fastapi&lt;/span>&lt;span class="o">=&lt;/span>0.38.1 -E all &lt;span class="c1"># pipenv install fastapi[all]&lt;/span>
poetry add celery --extras &lt;span class="s2">&amp;#34;librabbitmq redis auth msgpack&amp;#34;&lt;/span> &lt;span class="c1"># pip install &amp;#34;celery[librabbitmq,redis,auth,msgpack]&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>依赖安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">poetry install &lt;span class="c1"># 会从pyproject.toml文件里读取, 如果有poetry.lock文件则会从lock文件中读取锁定依赖并安装&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>虚拟环境地址&lt;/p>
&lt;ul>
&lt;li>&lt;strong>windows10&lt;/strong>: $User\AppData\Local\pypoetry\Cache\virtualenvs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>添加源&lt;/strong>&lt;/p>
&lt;p>修改pyproject.toml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;tsinghua&amp;#34;&lt;/span>
&lt;span class="nx">url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;https://pypi.tuna.tsinghua.edu.cn/simple/&amp;#34;&lt;/span>
&lt;span class="nx">verify_ssl&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="完整的实例">完整的实例&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;market-admin&amp;#34;&lt;/span>
&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.1.0&amp;#34;&lt;/span>
&lt;span class="nx">description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;market-admin is a Market background management system with fastapi&amp;#34;&lt;/span>
&lt;span class="nx">authors&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;huangkai&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">license&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;MIT&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">python&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^3.7&amp;#34;&lt;/span>
&lt;span class="nx">fastapi&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.38.1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">extras&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;all&amp;#34;&lt;/span>&lt;span class="p">]}&lt;/span>
&lt;span class="nx">python&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">dotenv&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.10.2&amp;#34;&lt;/span>
&lt;span class="nx">tortoise&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">orm&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.13.5&amp;#34;&lt;/span>
&lt;span class="nx">aiomysql&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.0.20&amp;#34;&lt;/span>
&lt;span class="nx">loguru&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;^0.3.2&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dev&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">dependencies&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">pytest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;6.2.1&amp;#34;&lt;/span>
&lt;span class="nx">coverage&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;5.3.1&amp;#34;&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">black&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c"># Black工具配置&lt;/span>
&lt;span class="nx">target&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">version&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;py37&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">skip&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">normalization&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">[[&lt;/span>&lt;span class="nx">tool&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">poetry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="c"># 源配置&lt;/span>
&lt;span class="nx">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;tsinghua&amp;#34;&lt;/span>
&lt;span class="nx">url&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;https://pypi.tuna.tsinghua.edu.cn/simple/&amp;#34;&lt;/span>
&lt;span class="nx">default&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nx">build&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">system&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">requires&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;poetry&amp;gt;=0.12&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">build&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">backend&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;poetry.masonry.api&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Nginx安装和基本使用</title><link>https://huangkai1008.github.io/p/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 26 Aug 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。
其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。
Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强&lt;/p>
&lt;h2 id="install">Install&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>platform: Centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>version: 7.2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wget http://nginx.org/download/nginx-1.16.1.tar.gz
tar -zxvf nginx-1.16.1.tar.gz
&lt;span class="nb">cd&lt;/span> nginx-1.16.1
sudo ./configure &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
whereis nginx &lt;span class="c1"># 查看nginx安装地址 /usr/local/nginx&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="basicuse">BasicUse&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>启动&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>重启&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">cd&lt;/span> /usr/local/nginx/sbin
./nginx -s reload
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="example-conf">Example Conf&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="c1"># /usr/local/nginx/conf/nginx.conf
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#user nobody;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">worker_processes&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#error_log logs/error.log;
&lt;/span>&lt;span class="c1">#error_log logs/error.log notice;
&lt;/span>&lt;span class="c1">#error_log logs/error.log info;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#pid logs/nginx.pid;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="k">events&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">worker_connections&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">http&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">include&lt;/span> &lt;span class="s">mime.types&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">default_type&lt;/span> &lt;span class="s">application/octet-stream&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#log_format main &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#access_log logs/access.log main;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kn">sendfile&lt;/span> &lt;span class="no">on&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#tcp_nopush on;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#keepalive_timeout 0;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">keepalive_timeout&lt;/span> &lt;span class="mi">65&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#gzip on;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># 包含aps的nginx配置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">include&lt;/span> &lt;span class="s">/usr/local/nginx/conf/aps/*.conf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">listen&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">server_name&lt;/span> &lt;span class="s">localhost&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#charset koi8-r;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1">#access_log logs/host.access.log main;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kn">location&lt;/span> &lt;span class="s">/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">root&lt;/span> &lt;span class="s">html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">index&lt;/span> &lt;span class="s">index.html&lt;/span> &lt;span class="s">index.htm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">#error_page 404 /404.html;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># redirect server error pages to the static page /50x.html
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">error_page&lt;/span> &lt;span class="mi">500&lt;/span> &lt;span class="mi">502&lt;/span> &lt;span class="mi">503&lt;/span> &lt;span class="mi">504&lt;/span> &lt;span class="s">/50x.html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">location&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">/50x.html&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">root&lt;/span> &lt;span class="s">html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># proxy the PHP scripts to Apache listening on 127.0.0.1:80
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#location ~ \.php$ {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># proxy_pass http://127.0.0.1;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#location ~ \.php$ {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># root html;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># fastcgi_pass 127.0.0.1:9000;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># fastcgi_index index.php;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># include fastcgi_params;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># deny access to .htaccess files, if Apache&amp;#39;s document root
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># concurs with nginx&amp;#39;s one
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#location ~ /\.ht {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># deny all;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1"># another virtual host using mix of IP-, name-, and port-based configuration
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#server {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># listen 8000;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># listen somename:8080;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># server_name somename alias another.alias;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># location / {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># root html;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># index index.html index.htm;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># HTTPS server
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#server {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># listen 443 ssl;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># server_name localhost;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># ssl_certificate cert.pem;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># ssl_certificate_key cert.key;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># ssl_session_cache shared:SSL:1m;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># ssl_session_timeout 5m;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># ssl_ciphers HIGH:!aNULL:!MD5;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># ssl_prefer_server_ciphers on;
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="c1"># location / {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># root html;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># index index.html index.htm;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># }
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">#}
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="c1"># /usr/local/nginx/conf/aps/aps.conf
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="k">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">listen&lt;/span> &lt;span class="mi">10050&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">server_name&lt;/span> &lt;span class="s">localhost&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 访问后端api
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/api/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">proxy_pass&lt;/span> &lt;span class="s">http://127.0.0.1:5500/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">Host&lt;/span> &lt;span class="nv">$host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">X-Real-IP&lt;/span> &lt;span class="nv">$remote_addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">X-Forwarded-For&lt;/span> &lt;span class="nv">$proxy_add_x_forwarded_for&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># 访问静态文件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/static/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">alias&lt;/span> &lt;span class="s">/usr/local/nginx/html/aps/dist/&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1"># 静态文件访问硬盘
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="c1"># 访问主页
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">root&lt;/span> &lt;span class="s">/usr/local/nginx/html/aps/dist/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">index&lt;/span> &lt;span class="s">index.html&lt;/span> &lt;span class="s">index.htm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Manjaro安装配置</title><link>https://huangkai1008.github.io/p/manjaro%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 01 Aug 2019 22:21:57 +0800</pubDate><guid>https://huangkai1008.github.io/p/manjaro%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="基本安装">基本安装&lt;/h2>
&lt;ol>
&lt;li>使用&lt;code>rufus&lt;/code>以dd模式写入U盘&lt;/li>
&lt;li>从u盘启动&lt;/li>
&lt;li>将manjaro启动项中的&lt;code>driver&lt;/code>和&lt;code>boot&lt;/code>添加或修改&lt;code>driver=intel&lt;/code>才能进入安装界面(双显卡笔记本)&lt;/li>
&lt;li>安装系统, 注意不要联网, 否则容易卡在安装&lt;/li>
&lt;li>reboot进入系统&lt;/li>
&lt;li>manjaro启动项中quiet后增加&lt;code>nouveau.modeset=0&lt;/code>(双显卡)&lt;/li>
&lt;/ol>
&lt;h2 id="双显卡使用prime管理连接外接显示器">双显卡使用prime管理连接外接显示器&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>删除bumblebee或者开源驱动&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mhwd -r pci nonfree &lt;span class="m">0300&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装nvidia私有闭源驱动&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方法一:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mhwd -i pci video-nvidia
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mhwd -i pci video-nvidia-390xx &lt;span class="c1"># 390xx或者435xx, 数字是驱动版本...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>方法二
&lt;code>系统设置-硬件设定&lt;/code>中右键安装&lt;code>video-nvidia-390xx&lt;/code>之类的驱动&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>安装依赖&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S linuxXXX-headers acpi_call-dkms xorg-xrandr xf86-video-intel git
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注: XXX 为内核版本， 本来我的5.3有点问题，降级成4.19才可以，以4.19为例便是
&lt;code>linux419-headers&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>注入&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo modprobe acpi_call
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用github上的脚本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">cd&lt;/span> ~ &lt;span class="c1"># 建议在用户目录下操作&lt;/span>
git clone https://github.com/dglt1/optimus-switch-sddm.git
&lt;span class="nb">cd&lt;/span> optimus-switch-sddm
chmod +x install.sh
sudo ./install.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>reboot&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Git Commit Message编写规范</title><link>https://huangkai1008.github.io/p/git-commit-message%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</link><pubDate>Fri, 12 Jul 2019 14:14:15 +0800</pubDate><guid>https://huangkai1008.github.io/p/git-commit-message%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/</guid><description>&lt;p>Git提交代码时需要提交Message, 为了使得提交信息更清晰明了, 需要确定规范&lt;/p>
&lt;p>现在比较流行的规范是Angular规范, 也根据此规范衍生了Conventional Commits specification&lt;/p>
&lt;h2 id="规范">规范&lt;/h2>
&lt;h3 id="格式">&lt;strong>格式&lt;/strong>&lt;/h3>
&lt;pre>&lt;code> &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/code>&lt;/pre>&lt;p>按照空行分割为三个部分, 分别为&lt;strong>Header&lt;/strong>，&lt;strong>Body&lt;/strong> 和 &lt;strong>Footer&lt;/strong>
其中，Header 是必需的，Body 和 Footer 可以省略
不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）, 这是为了避免自动换行影响美观&lt;/p>
&lt;h3 id="组成">&lt;strong>组成&lt;/strong>&lt;/h3>
&lt;h4 id="header">&lt;strong>Header&lt;/strong>&lt;/h4>
&lt;p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）&lt;/p>
&lt;ol>
&lt;li>
&lt;p>type&lt;/p>
&lt;p>​type用于说明 commit 的类别，只允许使用下面7个标识&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>feat：新功能（feature）&lt;/li>
&lt;li>fix：修补bug&lt;/li>
&lt;li>docs：文档（documentation）&lt;/li>
&lt;li>style： 格式（不影响代码运行的变动）&lt;/li>
&lt;li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）&lt;/li>
&lt;li>test：增加测试&lt;/li>
&lt;li>chore：构建过程或辅助工具的变动&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>&lt;em>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>scope&lt;/p>
&lt;p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同&lt;/p>
&lt;/li>
&lt;li>
&lt;p>subject&lt;/p>
&lt;p>subject是 commit 目的的简短描述，不超过50个字符&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes&lt;/li>
&lt;li>第一个字母小写&lt;/li>
&lt;li>结尾不加句号&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h4 id="body">&lt;strong>Body&lt;/strong>&lt;/h4>
&lt;p>Body 部分是对本次 commit 的详细描述，可以分成多行&lt;/p>
&lt;blockquote>
&lt;p>使用第一人称现在时，比如使用change而不是changed或changes&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>应该说明代码变动的动机，以及与以前行为的对比&lt;/p>
&lt;/blockquote>
&lt;h4 id="footer">&lt;strong>Footer&lt;/strong>&lt;/h4>
&lt;p>Footer部分可以用于表达&lt;strong>不兼容变动&lt;/strong>和&lt;strong>关闭Issue&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不兼容变动&lt;/p>
&lt;p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>关闭Issue&lt;/p>
&lt;blockquote>
&lt;p>Closes APS-151&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="jetbrains工具配置">Jetbrains工具配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>git commit template&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>提交信息模板&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Gitmoji&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>添加emoji表情在commit信息中&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul></description></item><item><title>值得关注的Python库</title><link>https://huangkai1008.github.io/p/%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84python%E5%BA%93/</link><pubDate>Mon, 27 May 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84python%E5%BA%93/</guid><description>&lt;h2 id="web-frameworks">Web Frameworks&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/encode/uvicorn" target="_blank" rel="noopener"
>Uvicorn&lt;/a> &lt;em>基于asyncio开发的一个轻量级高效的 web 服务器框架&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/encode/starlette" target="_blank" rel="noopener"
>Starlette&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gitlab.com/pgjones/quart" target="_blank" rel="noopener"
>Quart&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://python-responder.org" target="_blank" rel="noopener"
>Responder&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/tiangolo/fastapi" target="_blank" rel="noopener"
>&lt;code>Fastapi&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/huge-success/sanic" target="_blank" rel="noopener"
>Sanic&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="utils">Utils&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/sdispater/poetry" target="_blank" rel="noopener"
>Poetry&lt;/a> &lt;em>新的Python依赖包管理工具&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/pypa/pipenv" target="_blank" rel="noopener"
>Pipenv&lt;/a> &lt;em>用了很久的现在也在用的&amp;hellip; 有时候Locking速度感人, pipfile声明版本可以防止很多坑&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/psf/black" target="_blank" rel="noopener"
>Black&lt;/a> &lt;em>代码格式化库&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/Delgan/loguru" target="_blank" rel="noopener"
>Loguru&lt;/a> &lt;em>python日志库&lt;/em>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/cool-RR/PySnooper" target="_blank" rel="noopener"
>PySnooper&lt;/a> &lt;em>python Debugger&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="orm">ORM&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://python-gino.org/" target="_blank" rel="noopener"
>Gino&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://tortoise.github.io/" target="_blank" rel="noopener"
>tortoise-orm&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="test">Test&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/locustio/locust" target="_blank" rel="noopener"
>locust&lt;/a> &lt;em>压力测试工具&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="environment">Environment&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/theskumar/python-dotenv" target="_blank" rel="noopener"
>python-dotenv&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/sloria/environs" target="_blank" rel="noopener"
>environs&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Spring初始化工具</title><link>https://huangkai1008.github.io/p/spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E5%85%B7/</link><pubDate>Thu, 07 Feb 2019 11:15:10 +0800</pubDate><guid>https://huangkai1008.github.io/p/spring%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E5%85%B7/</guid><description>&lt;h2 id="使用idea初始化spring-boot项目">使用IDEA初始化Spring Boot项目&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>选择&lt;code>File&lt;/code> -&amp;gt; &lt;code>New&lt;/code> -&amp;gt; &lt;code>Project&lt;/code> 新建项目&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择&lt;code>Spring Initializr&lt;/code>， 点击&lt;code>Next&lt;/code>，填写项目基本信息
&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210413134322.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>项目依赖勾选&lt;code>Spring Web&lt;/code>选择&lt;code>Finish&lt;/code>等待项目构建&lt;/p>
&lt;p>&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210413134345.png" alt="" />&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>​&lt;/p></description></item><item><title>WSGI ASGI UWSGI的区别</title><link>https://huangkai1008.github.io/p/wsgi-asgi-uwsgi%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Thu, 24 Jan 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/wsgi-asgi-uwsgi%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>&lt;h2 id="what-is-wsgi">&lt;strong>What is wsgi&lt;/strong>&lt;/h2>
&lt;pre>&lt;code>**CGI(通用网关接口， Common Gateway Interface/CGI)**
**CGI是定义客户端与web服务器交流方式的程序**。&amp;lt;u&amp;gt;例如正常情况下客户端发来一个请求，根据HTTP协议Web服务器将请求内容解析出来，进过计算后，再将加us安出来的内容封装好，例如服务器返回一个HTML页面，并且根据HTTP协议构建返回内容的响应格式。涉及到TCP连接、HTTP原始请求和相应格式的这些，都由一个软件来完成，这时，以上的工作需要一个程序来完成，而这个程序便是CGI&amp;lt;/u&amp;gt;**
**WSGI(Web服务器网关接口(Python Web Server Gateway Interface，WSGI)**
`WSGI`就是基于`Python`的以`CGI`为标准做一些扩展的协议
&lt;/code>&lt;/pre>
&lt;h2 id="what-is-uwsgi">&lt;strong>What is uwsgi&lt;/strong>&lt;/h2>
&lt;p>&lt;code>uWSGI&lt;/code>，是指实现了&lt;strong>WSGI协议&lt;/strong>的一个&lt;strong>web服务器&lt;/strong>。即用来接受客户端请求，转发响应的程序&lt;/p>
&lt;h2 id="what-is-asgi">&lt;strong>What is asgi&lt;/strong>&lt;/h2>
&lt;pre>&lt;code>异步网关协议接口，一个介于网络协议服务和`Python`应用之间的标准接口，能够处理多种通用的协议类型，包括`HTTP`，`HTTP2`和`WebSocket`
&lt;/code>&lt;/pre>
&lt;p>&lt;code>ASGI&lt;/code>尝试保持在一个简单的应用接口的前提下，提供允许数据能够在任意的时候、被任意应用进程发送和接受的抽象。并且同样描述了一个新的，兼容&lt;code>HTTP&lt;/code>请求响应以及&lt;code>WebSocket&lt;/code>数据帧的序列格式。允许这些协议能通过网络或本地&lt;code>socket&lt;/code>进行传输，以及让不同的协议被分配到不同的进程中&lt;/p>
&lt;h2 id="difference-between-wsgi--asgi">&lt;strong>Difference between wsgi &amp;amp; asgi&lt;/strong>&lt;/h2>
&lt;pre>&lt;code>1. Wsgi is based on `Http`, not support `websocket`
2. Asgi is the extension of wsgi.
&lt;/code>&lt;/pre></description></item><item><title>RabbitMQ基础安装使用</title><link>https://huangkai1008.github.io/p/rabbitmq%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 12 Nov 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/rabbitmq%E5%9F%BA%E7%A1%80%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="rabbitmq">RabbitMQ&lt;/h2>
&lt;ul>
&lt;li>Platform: Centos7&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>install Erlang&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">yum install erlang
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>install rabbitMQ&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># rpm安装&lt;/span>
wget https://github.com/rabbitmq/rabbitmq-server/releases/download/rabbitmq_v3_6_14/rabbitmq-server-3.6.14-1.el7.noarch.rpm
yum install rabbitmq-server-3.6.14-1.el7.noarch.rpm
&lt;span class="c1"># yum安装&lt;/span>
yum install rabbitmq-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>启动远程访问&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[{&lt;/span>rabbit,
&lt;span class="o">[&lt;/span>
&lt;span class="o">{&lt;/span>loopback_users, &lt;span class="o">[]}&lt;/span>
&lt;span class="o">]}]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装插件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">/sbin/rabbitmq-plugins &lt;span class="nb">enable&lt;/span> rabbitmq_management
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="使用">使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>服务命令&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl start rabbitmq-server.service &lt;span class="c1"># 启动&lt;/span>
systemctl status rabbitmq-server.service &lt;span class="c1"># 查看状态&lt;/span>
systemctl restart rabbitmq-server.service &lt;span class="c1"># 重启&lt;/span>
systemctl &lt;span class="nb">enable&lt;/span> rabbitmq-server.service &lt;span class="c1"># 开机自启&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>添加用户&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">rabbitmqctl add_user root root123 &lt;span class="c1"># 添加新用户，用户名为 &amp;#34;root&amp;#34; ，密码为 &amp;#34;root123&amp;#34;&lt;/span>
rabbitmqctl set_permissions -p / root &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;.*&amp;#34;&lt;/span> &lt;span class="c1"># 为root用户添加所有权限&lt;/span>
rabbitmqctl set_user_tags root administrator &lt;span class="c1"># 设置root 用户为管理员角色&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>访问web页面&lt;/p>
&lt;pre>&lt;code>http://ip:15672
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul></description></item><item><title>Mysql优化</title><link>https://huangkai1008.github.io/p/mysql%E4%BC%98%E5%8C%96/</link><pubDate>Tue, 06 Nov 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E4%BC%98%E5%8C%96/</guid><description>&lt;h2 id="mysql中min和max查询优化">mysql中min和max查询优化&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>max()&lt;/code>函数需扫描where条件过滤后的所有行&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>慎用&lt;code>max()&lt;/code>函数，特别是频繁执行的sql，若需用到可转化为&lt;code>order by id desc limit 1&lt;/code>&lt;/p>
&lt;/blockquote></description></item><item><title>Redis安装配置</title><link>https://huangkai1008.github.io/p/redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 11 Oct 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/redis%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="redis-安装">Redis 安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Platform: centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>version: 5.0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wget http://download.redis.io/releases/redis-5.0.0.tar.gz &lt;span class="c1"># 获取包&lt;/span>
tar -zxvf redis-5.0.0.tar.gz
mv redis-5.0.0 /usr/local/redis
make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="redis配置">Redis配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>设置配置文件目录&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir -p /etc/redis
cp redis.conf /etc/redis
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改配置文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">vim /etc/redis/redis.conf
daemonize yes &lt;span class="o">(&lt;/span>no -&amp;gt; yes&lt;span class="o">)&lt;/span> &lt;span class="c1"># 守护进程&lt;/span>
&lt;span class="nb">bind&lt;/span> 0.0.0.0 &lt;span class="o">(&lt;/span>127.0.0.1 -&amp;gt; 0.0.0.0&lt;span class="o">)&lt;/span> &lt;span class="c1"># 远程登录&lt;/span>
protected-mode no &lt;span class="o">(&lt;/span>yes -&amp;gt; no&lt;span class="o">)&lt;/span> &lt;span class="c1"># 关闭保护模式/或者添加密码&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="redis使用">Redis使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>启动&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">/usr/local/bin/redis-server /etc/redis/redis.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看启动&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">ps -ef &lt;span class="p">|&lt;/span> grep redis
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>客户端使用&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">redis-cli &lt;span class="c1"># 进入&lt;/span>
127.0.0.1:6379&amp;gt;set name Huang
Ok
redis-cli shutdown &lt;span class="c1"># 关闭客户端&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>开机启动配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 开机启动要配置在 rc.local 中，而 /etc/profile 文件，要有用户登录了，才会被执行。&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;/usr/local/bin/redis-server /etc/redis/redis.conf &amp;amp;&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/rc.local
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="supervisor管理redis">Supervisor管理Redis&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>更改redis配置&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">vim /etc/redis/redis.conf
daemonize no &lt;span class="o">(&lt;/span>yes -&amp;gt; no&lt;span class="o">)&lt;/span> &lt;span class="c1"># 取消守护进程&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建supervisor对redis的配置文件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">vim /etc/supervisord.d/redis.ini
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> `redis.ini`文件如下
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>program:redis&lt;span class="o">]&lt;/span>
&lt;span class="nv">command&lt;/span>&lt;span class="o">=&lt;/span>redis-server /etc/redis/redis.conf &lt;span class="c1"># 启动Redis的命令&lt;/span>
&lt;span class="nv">autostart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> &lt;span class="c1"># supervisord启动时，该程序也启动&lt;/span>
&lt;span class="nv">autorestart&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> &lt;span class="c1"># 异常退出时，自动启动&lt;/span>
&lt;span class="nv">startsecs&lt;/span>&lt;span class="o">=&lt;/span>3 &lt;span class="c1"># 启动后持续3s后未发生异常，才表示启动成功 &lt;/span>
&lt;span class="nv">stdout_logfile&lt;/span>&lt;span class="o">=&lt;/span>/var/log/supervisor/redis/redis.log &lt;span class="c1"># 标准输出流日志&lt;/span>
&lt;span class="nv">stderr_logfile&lt;/span>&lt;span class="o">=&lt;/span>/var/log/supervisor/redis/redis_err.log &lt;span class="c1"># 标准错误输出流日志&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul></description></item><item><title>Angular Starter</title><link>https://huangkai1008.github.io/p/angular-starter/</link><pubDate>Tue, 09 Oct 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/angular-starter/</guid><description>&lt;h2 id="安装angular">安装Angular&lt;/h2>
&lt;h3 id="确保nodenpm已安装">确保node/npm已安装&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">node -v 查看node版本
npm -v 查看npm版本
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装typescript">安装typescript&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm install -g typescript
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装angular-cli">安装Angular CLI&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm install -g @angular/cli
ng version &lt;span class="c1"># 验证angular-cli版本&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="建立一个新的angular项目">建立一个新的Angular项目&lt;/h2>
&lt;p>Angular CLI 为我们提供了两种方式，用于创建新的应用程序：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ng init&lt;/code> - 在当前目录创建新的应用程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ng new&lt;/code> - 创建新的目录，然后在新建的目录中运行 ng init 命令&lt;/p>
&lt;p>因此 &lt;code>ng new&lt;/code> 与 &lt;code>ng init&lt;/code> 的功能是相似的，只是 &lt;code>ng new&lt;/code> 会为我们创建新的目录&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="创建应用">创建应用&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">ng new my-app
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="可用选项">可用选项&lt;/h3>
&lt;ul>
&lt;li>&lt;code>--dry-run&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 若设置 &lt;code>dry-run&lt;/code> 则不会创建任何文件&lt;/li>
&lt;li>&lt;code>--verbose&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>&lt;/li>
&lt;li>&lt;code>--link-cli&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 自动链接到 &lt;code>@angular/cli&lt;/code> 包&lt;/li>
&lt;li>&lt;code>--skip-install&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示跳过 &lt;code>npm install&lt;/code>&lt;/li>
&lt;li>&lt;code>--skip-git&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示该目录不初始化为 git 仓库&lt;/li>
&lt;li>&lt;code>--skip-tests&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示不创建 tests 相关文件&lt;/li>
&lt;li>&lt;code>--skip-commit&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示不进行初始提交&lt;/li>
&lt;li>&lt;code>--directory&lt;/code>: string, 用于设置创建的目录名，默认与应用程序的同名&lt;/li>
&lt;li>&lt;code>--source-dir&lt;/code>: string, 默认为 &lt;code>'src'&lt;/code>, 用于设置源文件目录的名称&lt;/li>
&lt;li>&lt;code>--style&lt;/code>: string, 默认为 &lt;code>'css'&lt;/code>, 用于设置选用的样式语法 (&lt;code>'css'&lt;/code>, &lt;code>'less'&lt;/code> or &lt;code>'scss'&lt;/code>)&lt;/li>
&lt;li>&lt;code>--prefix&lt;/code>: string, 默认为 &lt;code>'app'&lt;/code>, 用于设置创建新组件时，组件选择器使用的前缀&lt;/li>
&lt;li>&lt;code>--mobile&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>,表示是否生成 Progressive Web App 应用程序&lt;/li>
&lt;li>&lt;code>--routing&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示新增带有路由信息的模块，并添加到根模块中&lt;/li>
&lt;li>&lt;code>--inline-style&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示当创建新的应用程序时，使用内联样式&lt;/li>
&lt;li>&lt;code>--inline-template&lt;/code>: boolean, 默认为 &lt;code>false&lt;/code>, 表示当创建新的应用程序时，使用内联模板&lt;/li>
&lt;/ul></description></item><item><title>MongoDB的安装</title><link>https://huangkai1008.github.io/p/mongodb%E7%9A%84%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 12 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mongodb%E7%9A%84%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>Platform: centos7&lt;/li>
&lt;/ul></description></item><item><title>MariaDB安装</title><link>https://huangkai1008.github.io/p/mariadb%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mariadb%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="mariadb安装">MariaDB安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>platform&lt;/strong>: Centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Install&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">yum install -y mariadb-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="mariadb配置使用">MariaDB配置使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Using&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl start mariadb.service &lt;span class="c1"># 启动&lt;/span>
systemctl &lt;span class="nb">enable&lt;/span> mariadb.service &lt;span class="c1"># 开机自启&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Configure&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先是设置密码，会提示先输入密码&lt;/p>
&lt;blockquote>
&lt;p>Enter current password for root (enter for none): &amp;lt;–直接回车&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Set root password? [Y/n] &amp;lt;– 是否设置root用户密码，输入y并回车或直接回车&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>New password: &amp;lt;– 设置root用户的密码&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Re-enter new password: &amp;lt;– 再输入一次你设置的密码&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>其他配置&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Remove anonymous users? [Y/n] &amp;lt;– 是否删除匿名用户，Y回车&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Disallow root login remotely? [Y/n] &amp;lt;–是否禁止root远程登录, N回车,&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Remove test database and access to it? [Y/n] &amp;lt;– 是否删除test数据库，Y回车&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Reload privilege tables now? [Y/n] &amp;lt;– 是否重新加载权限表，Y回车2.开启远程访问&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>开启远程访问&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">GRANT&lt;/span> &lt;span class="k">ALL&lt;/span> &lt;span class="k">PRIVILEGES&lt;/span> &lt;span class="k">ON&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">TO&lt;/span> &lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="k">IDENTIFIED&lt;/span> &lt;span class="k">BY&lt;/span> &lt;span class="s1">&amp;#39;123456&amp;#39;&lt;/span> &lt;span class="k">WITH&lt;/span> &lt;span class="k">GRANT&lt;/span> &lt;span class="k">OPTION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>刷新权限&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">flush&lt;/span> &lt;span class="k">privileges&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>配置文件地址
&lt;!-- raw HTML omitted -->
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Mysql安装配置</title><link>https://huangkai1008.github.io/p/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/mysql%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</guid><description>&lt;h2 id="mysql安装">Mysql安装&lt;/h2>
&lt;ul>
&lt;li>版本: 8.0&lt;/li>
&lt;li>添加源
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">yum &lt;span class="nb">local&lt;/span> install https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>安装
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">yum install mysql-community-server
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="mysql配置">Mysql配置&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>初始化&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mysqld --initialize --user&lt;span class="o">=&lt;/span>mysql --basedir&lt;span class="o">=&lt;/span>/usr --datadir&lt;span class="o">=&lt;/span>/var/lib/mysql
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>启动mysql&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl start mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置mysql开机自启&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl &lt;span class="nb">enable&lt;/span> mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看初始密码&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash"> grep &lt;span class="s1">&amp;#39;temporary password&amp;#39;&lt;/span> /var/log/mysqld.log
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>进入mysql&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">mysql -u root -p
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改密码&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">ALTER&lt;/span> &lt;span class="k">USER&lt;/span> &lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span> &lt;span class="k">IDENTIFIED&lt;/span> &lt;span class="k">BY&lt;/span> &lt;span class="s1">&amp;#39;Huang|12345&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看版本&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">select&lt;/span> &lt;span class="nf">version&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="o">+-----------+&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="nf">version&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+-----------+&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+-----------+&lt;/span>
&lt;span class="mi">1&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="kt">set&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">00&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看端口&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">show&lt;/span> &lt;span class="n">global&lt;/span> &lt;span class="n">variables&lt;/span> &lt;span class="k">like&lt;/span> &lt;span class="s1">&amp;#39;port&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">+---------------+-------+&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">Variable_name&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Value&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+---------------+-------+&lt;/span>
&lt;span class="o">|&lt;/span> &lt;span class="n">port&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="mi">3306&lt;/span> &lt;span class="o">|&lt;/span>
&lt;span class="o">+---------------+-------+&lt;/span>
&lt;span class="mi">1&lt;/span> &lt;span class="n">row&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="kt">set&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">04&lt;/span> &lt;span class="n">sec&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>远程访问&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="k">use&lt;/span> &lt;span class="n">mysql&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">update&lt;/span> &lt;span class="k">user&lt;/span> &lt;span class="kt">set&lt;/span> &lt;span class="n">host&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;%&amp;#39;&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="k">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">flush&lt;/span> &lt;span class="k">privileges&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>数据库系统概论-介绍</title><link>https://huangkai1008.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-%E4%BB%8B%E7%BB%8D/</link><pubDate>Sun, 09 Sep 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA-%E4%BB%8B%E7%BB%8D/</guid><description>&lt;h2 id="数据库系统的目的purpose-of-database-systems">数据库系统的目的(&lt;code>Purpose of Database Systems&lt;/code>)&lt;/h2>
&lt;p>在早期，数据库应用程序直接建立在文件系统之上，导致一系列的问题&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>数据冗余和不一致&lt;/strong>(&lt;code>Data redundancy and inconsistency&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据访问难度大&lt;/strong>(&lt;code>Difficulty in accessing data&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据隔离&lt;/strong>(&lt;code>Data isolation&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>完整性问题&lt;/strong>(&lt;code>Integrity problems&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>完整性约束(&lt;code>Integrity constraints&lt;/code>)问题&lt;/p>
&lt;p>难以添加新约束和修改约束&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>原子性更新&lt;/strong>(&lt;code>Atomicity of updates&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>更新失败可能会导致数据库的数据处于不一致的状态，或者只更新了部分数据&lt;/p>
&lt;p>例如: 从一方转账给另一方，只会有完成转账和完全没发生转账两种情况，不会出现转账方转账了但是收款方未收到款项的问题&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>多用户并发访问&lt;/strong>(&lt;code>Concurrent access by multiple users&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>并发访问需要高性能的支持， 而不受控制的并发访问可能会导致数据不一致&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全问题&lt;/strong>(&lt;code>Security problems&lt;/code>)&lt;/p>
&lt;blockquote>
&lt;p>文件系统难以提供安全保障&lt;/p>
&lt;/blockquote>
&lt;p>数据库系统就是为了解决这些问题产生的&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="数据模型data-models">数据模型(&lt;code>Data Models&lt;/code>)&lt;/h2>
&lt;h3 id="组成">组成&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>一系列用于描述的工具&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>数据(&lt;code>Data&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据关系(&lt;code>Data relationships&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>数据语义(&lt;code>Data semantics&lt;/code>)&lt;/li>
&lt;li>数据约束(&lt;code>Data constraints&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>&lt;strong>关系模型&lt;/strong>(&lt;code>Relational model&lt;/code>)&lt;/li>
&lt;li>&lt;strong>实体关系数据模型&lt;/strong>(&lt;code>Entity-Relationship data model&lt;/code> 主要用于数据库设计)&lt;/li>
&lt;li>&lt;strong>基于对象的数据模型&lt;/strong>(&lt;code>Object-based data models (Object-oriented and Object-relational)&lt;/code>)&lt;/li>
&lt;li>&lt;strong>半结构化数据模型&lt;/strong>(&lt;code>Semi-structured data model (XML)&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h2 id="数据视图view-of-data">数据视图(&lt;code>View of Data&lt;/code>)&lt;/h2>
&lt;p>一个数据库系统的结构如下图
&lt;img src="https://gitee.com/huanghuang927/picture-host/raw/master/20210413133615.svg" alt="View of data" />&lt;/p>
&lt;h3 id="模式与实例instances-and-schema">模式与实例(Instances and Schema)&lt;/h3>
&lt;p>类似于编程语言中的类型和变量&lt;/p>
&lt;ul>
&lt;li>&lt;code>逻辑模式(logic schema)&lt;/code> 数据库的总体逻辑结构，类似于程序设计中的变量类型信息&lt;/li>
&lt;li>&lt;code>物理模式(physical schema)&lt;/code> 数据库的总体物理结构&lt;/li>
&lt;li>&lt;code>实例(instance)&lt;/code> 数据库在特定时间点的实际内容， 类似于变量的值&lt;/li>
&lt;/ul>
&lt;h3 id="物理数据独立性physical--data-independence">物理数据独立性(Physical Data Independence)&lt;/h3>
&lt;blockquote>
&lt;p>定义： 在不更改逻辑模式的情况下修改物理模式的能力&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>应用程序依赖于逻辑模式(&lt;code>logic schema&lt;/code>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般来说，不同级别和组件应该定义得很好，以便在某些部分中进行更改，不严重影响他人&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="数据定义语言data-definition-language">数据定义语言(Data Definition Language)&lt;/h3>
&lt;blockquote>
&lt;p>定义数据库模式的规范表示法&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql"> &lt;span class="k">create&lt;/span> &lt;span class="k">table&lt;/span> &lt;span class="n">instructor&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">ID&lt;/span> &lt;span class="nb">char&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">name&lt;/span> &lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">dept_name&lt;/span> &lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">salary&lt;/span> &lt;span class="nb">numeric&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>DDL编译器生成一组存储表模板信息的数据字典（&lt;code>data dictionary&lt;/code>)&lt;/p>
&lt;p>数据字典包含元信息(&lt;code>metadata&lt;/code>)&lt;/p>
&lt;ul>
&lt;li>数据库模式(&lt;code>database schema&lt;/code>)&lt;/li>
&lt;li>完整性约束(&lt;code>Integrity constraints&lt;/code>)
&lt;ul>
&lt;li>主键&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>授权(&lt;code>Authorization&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h3 id="数据处理语言data-manipulation-language-">数据处理语言(&lt;code>Data Manipulation Language &lt;/code>)&lt;/h3>
&lt;blockquote>
&lt;p>用于访问和更新由适当数据模型组织的数据的语言（查询语言）&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>DML一般分为两种类型
&lt;ul>
&lt;li>Pure&lt;/li>
&lt;li>Commercial
&lt;ul>
&lt;li>例如&lt;code>SQL&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;h3 id="结构化查询语言structured-query-language-sql">结构化查询语言(&lt;code>Structured Query Language&lt;/code>, SQL)&lt;/h3>
&lt;blockquote>
&lt;p>SQL查询语言是非过程的查询将多个表（可能只有一个）作为输入，并始终返回一个表(SQL query language is nonprocedural. A query takes as input several tables (possibly only one) and always returns a single table)&lt;/p>
&lt;/blockquote>
&lt;h3 id="数据库设计database-design">数据库设计(&lt;code>Database Design&lt;/code>)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>逻辑设计(&lt;code>logic design&lt;/code>) &amp;ndash; 决定数据库模式&lt;/p>
&lt;ul>
&lt;li>
&lt;p>业务决定&lt;/p>
&lt;blockquote>
&lt;p>我们应该在数据库中记录哪些属性&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>计算机科学决定&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>我们应该有什么关系模式&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>属性应该如何分布在不同的关系模式中&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>物理设计(&lt;code>physical design&lt;/code>) &amp;ndash; 决定数据库的物理布局&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Golang安装</title><link>https://huangkai1008.github.io/p/golang%E5%AE%89%E8%A3%85/</link><pubDate>Tue, 31 Jul 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/golang%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Platform: Centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>version: 1.12&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">cd&lt;/span> /opt
wget https://studygolang.com/dl/golang/go1.12.4.linux-amd64.tar.gz
tar xzvf go1.12.4.linux-amd64.tar.gz &lt;span class="c1"># 安装&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>配置环境变量&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">vim ~/.zshrc &lt;span class="c1"># 如果用bash就是vim ~/.bashrc&lt;/span>
&lt;span class="c1"># 追加golang配置&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOROOT&lt;/span>&lt;span class="o">=&lt;/span>/opt/go
&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$PATH&lt;/span>:&lt;span class="nv">$GOROOT&lt;/span>/bin
&lt;span class="c1"># 立即生效&lt;/span>
&lt;span class="nb">source&lt;/span> ~/.zshrc
&lt;span class="c1"># 查看版本&lt;/span>
go version
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>扩展Python Json Encoder</title><link>https://huangkai1008.github.io/p/%E6%89%A9%E5%B1%95python-json-encoder/</link><pubDate>Mon, 09 Apr 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%89%A9%E5%B1%95python-json-encoder/</guid><description>&lt;p>Python默认的json模块序列化并不是很全面，只能序列化基本的数据类型, 像一些时间格式或者自定义类型都不能序列化，所以在有些时候需要扩展json模块的json encoder&lt;/p>
&lt;h2 id="扩展">扩展&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">dt&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">decimal&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">json&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">enum&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">collections.abc&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Iterator&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">ExtendedEncoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">JSONEncoder&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">default&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;%Y-%m-&lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s1"> %H:%M:%S&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">strftime&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;%Y-%m-&lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decimal&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Decimal&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">elif&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Enum&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">JSONEncoder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">default&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用场景">使用场景&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>日常格式化&lt;/strong>&lt;/p>
&lt;p>例如对于日期格式的格式化&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">datetime&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">dt&lt;/span>
&lt;span class="n">now&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">datetime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于now如果使用json.dumps(t_now)便会触发&lt;!-- raw HTML omitted -->TypeError: Object of type datetime is not JSON serializable&lt;!-- raw HTML omitted -->
使用扩展的Encoder&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python"> &lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dumps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">cls&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ExtendedEncoder&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s1">&amp;#39;2018-04-09 23:04:49&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Flask&lt;/strong>&lt;/p>
&lt;p>修改flask类的json_encoder&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">flask&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Flask&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">_Flask&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">QuizFlask&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_Flask&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span class="s2"> 自定义flask
&lt;/span>&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="n">json_encoder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ExtendedEncoder&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">make_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">rv&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">rv&lt;/span> &lt;span class="ow">is&lt;/span> &lt;span class="bp">None&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">rv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">isinstance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">rv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">QuizFlask&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">make_response&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rv&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Tortoise-orm&lt;/strong>&lt;/p>
&lt;p>模型jsonfield的encoder&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">json&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">tortoise&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">fields&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">tortoise.models&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Model&lt;/span>
&lt;span class="n">__all__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;OurModel&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">OurModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;示例model&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fields&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">IntField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pk&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">cat_ids&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fields&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">JSONField&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">encoder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">ExtendedEncoder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">decoder&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">decoder&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="c1"># JsonField的encoder&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Python线程池使用</title><link>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 08 Feb 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>从Python3.2开始，标准库为我们提供了 concurrent.futures 模块，它提供了 ThreadPoolExecutor (线程池)和ProcessPoolExecutor (进程池)两个类。&lt;/p>
&lt;p>相比 threading 等模块，该模块通过 submit 返回的是一个 future 对象，它是一个未来可期的对象，通过它可以获悉线程的状态主线程(或进程)中可以获取某一个线程(进程)执行的状态或者某一个任务执行的状态及返回值：&lt;/p>
&lt;p>1.主线程可以获取某一个线程（或者任务的）的状态，以及返回值。&lt;/p>
&lt;p>2.当一个线程完成的时候，主线程能够立即知道。&lt;/p>
&lt;p>3.让多线程和多进程的编码接口一致。&lt;/p>
&lt;h2 id="基本使用">基本使用&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 创建一个最大容纳数量为5的线程池&lt;/span>
&lt;span class="n">task1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">task2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 通过submit提交执行的函数到线程池中&lt;/span>
&lt;span class="n">task3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;task1: {task1.done()}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 通过done来判断线程是否完成&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;task2: {task2.done()}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;task3: {task3.done()}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">2.5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;task1: {task1.done()}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;task2: {task2.done()}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s2">&amp;#34;task3: {task3.done()}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># 通过result来获取返回值&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">task1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;span class="n">task2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;span class="n">task3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="n">task1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">True&lt;/span>
&lt;span class="n">task2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">True&lt;/span>
&lt;span class="n">task3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="bp">False&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="api">Api&lt;/h2>
&lt;h3 id="as_completed">as_completed&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>concurrent.futures.as_completed(fs, timeout=None)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>返回一个生成器在迭代过程中会阻塞&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>直到线程完成或者异常时,返回一个被set_result的Future对象&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>此方法的返回顺序为哪个线程先失败/完成就返回&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">as_completed&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 创建一个最大容纳数量为5的线程池&lt;/span>
&lt;span class="n">tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">page&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">future&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">as_completed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">future&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="mi">2&lt;/span>
&lt;span class="mi">3&lt;/span>
&lt;span class="mi">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wait">wait&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>fs&lt;/strong>: 执行的序列&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>timeout&lt;/strong>: 等待的最大时间，如果超过这个时间即使线程未执行完成也将返回&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>return_when&lt;/strong>: 表示wait返回结果的条件，默认为 ALL_COMPLETED 全部执行完成再返回&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>FIRST_COMPLETED&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code>函数将在任意可等待对象结束或取消时返回。
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;ul>
&lt;li>FIRST_EXCEPTION&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code>函数将在任意可等待对象因引发异常而结束时返回。
当没有引发任何异常时它就相当于 ALL_COMPLETED。
&lt;/code>&lt;/pre>
&lt;blockquote>
&lt;ul>
&lt;li>ALL_COMPLETED&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre>&lt;code>函数将在所有可等待对象结束或取消时返回。
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">wait&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 创建一个最大容纳数量为5的线程池&lt;/span>
&lt;span class="n">tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">page&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Future&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x1c071fb1f28&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">finished&lt;/span> &lt;span class="n">returned&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Future&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x1c071fb1d68&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">finished&lt;/span> &lt;span class="n">returned&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Future&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x1c071f9fd68&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">finished&lt;/span> &lt;span class="n">returned&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Future&lt;/span> &lt;span class="n">at&lt;/span> &lt;span class="mh">0x1c071d78278&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">finished&lt;/span> &lt;span class="n">returned&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nb">set&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map">map&lt;/h3>
&lt;blockquote>
&lt;p>*&lt;em>concurrent.futures.Executor.map(fn, &lt;em>iterables, timeout=None)&lt;/em>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>fn&lt;/strong>: 第一个参数 fn 是需要线程执行的函数&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>*&lt;strong>iterables&lt;/strong>: 第二个参数接受一个可迭代对象&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>timeout&lt;/strong>: 第三个参数 timeout 跟 wait() 的 timeout 一样，但由于 map 是返回线程执行的结果，如果 timeout小于线程执行时间会抛异常 TimeoutError&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="n">URLS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">url&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">url&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_workers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">executor&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1"># 创建一个最大容纳数量为5的线程池&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">executor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">URLS&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="mi">2&lt;/span>
&lt;span class="mi">3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="回调函数">回调函数&lt;/h2>
&lt;p>回调函数(add_done_callback)是在调用线程完成后再调用的&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">concurrent.futures&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">wait&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">threading&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">get_page&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">call_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s1">&amp;#39;tid: {threading.current_thread().ident}&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">worker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="k">with&lt;/span> &lt;span class="n">ThreadPoolExecutor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">tasks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">page&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">submit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">get_page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add_done_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">call_back&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">tasks&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">task&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tasks&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">tid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6392&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="n">tid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">14936&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;span class="n">tid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12516&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="n">tid&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10524&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="异常处理">异常处理&lt;/h2>
&lt;ul>
&lt;li>通过添加回调函数的方法处理异常&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">logging&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">executor_callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="s1">&amp;#39;finished&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">worker_exception&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">worker&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="n">worker_exception&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="n">logging&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exception&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">worker_exception&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="备注">备注&lt;/h2>
&lt;ul>
&lt;li>一定使用with关键字处理线程池，在某些情况下线程池可能不能自动回收线程资源，with可以避免内存持续增长等情况&lt;/li>
&lt;/ul></description></item><item><title>Docker安装</title><link>https://huangkai1008.github.io/p/docker%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 31 Jan 2018 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/docker%E5%AE%89%E8%A3%85/</guid><description>&lt;ul>
&lt;li>
&lt;p>Platform: centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>version: 5.0&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装">安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Uninstall old versions&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo yum remove docker &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-client &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-client-latest &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-common &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-latest &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-latest-logrotate &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-logrotate &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> docker-engine
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>Install Docker CE&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo yum install -y yum-utils &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> device-mapper-persistent-data &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> lvm2
&lt;span class="c1"># 设置stable源&lt;/span>
sudo yum-config-manager &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --add-repo &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> https://download.docker.com/linux/centos/docker-ce.repo
&lt;span class="c1"># 安装Docker CE&lt;/span>
sudo yum install docker-ce docker-ce-cli containerd.io
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="启动">启动&lt;/h2>
&lt;ul>
&lt;li>Docker启动
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo systemctl start docker &lt;span class="c1"># 启动Docker&lt;/span>
sudo systemctl status docker &lt;span class="c1"># 查看Docker状态&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Sqlalchemy使用注意</title><link>https://huangkai1008.github.io/p/sqlalchemy%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</link><pubDate>Wed, 14 Jun 2017 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/sqlalchemy%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</guid><description>&lt;ul>
&lt;li>
&lt;p>遇到in查询之类的批量删除或者更新，可以使用&lt;strong>synchronize_session=False&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">synchronize_session&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用&lt;strong>find_in_set&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">sqlalchemy.sql.expression&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">func&lt;/span>
&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Post&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">func&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">find_in_set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;10&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Post&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tag_id&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>批量增加删除&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">db.session.add_all&lt;span class="o">(&lt;/span>instances&lt;span class="o">)&lt;/span>
db.session.delete_all&lt;span class="o">(&lt;/span>instances&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Mysql IS NULL判断&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">isnot&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">is_&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Mysql 联合主键&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">sqlalchemy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">PrimaryKeyConstraint&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">Node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">__table_args__&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">PrimaryKeyConstraint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;pk1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;pk2&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Flask_sqlalchemy支持Double精度类型字段&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">sqlalchemy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Column&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">sqlalchemy.dialects.mysql&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">DOUBLE&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">app&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">db&lt;/span>
&lt;span class="k">class&lt;/span> &lt;span class="nc">BaseModel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Model&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="nb">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">primary_key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="bp">True&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Flask_sqlalchemy&lt;/span>
&lt;span class="n">double_column&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">DOUBLE&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">comment&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;双精度字段&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Sqlalchemy mysql double column&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>subquery使用实例&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">conditions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">material_period&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">():&lt;/span>
&lt;span class="n">condition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">and_&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">CraftEntityAttrs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">attr_number&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CraftEntityAttrs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">attr_value&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">value&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">conditions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">conditions&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nb">list&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CraftEntityAttrs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entity_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CraftEntityAttrs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cat_number&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">or_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">conditions&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">subquery&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">proc_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">period&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hours&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">major_wrapper_skill_level&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cat_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CraftEntityPeriodHours&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entity_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">entity_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_seq&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">proc_number&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">in_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">COIL_PROC_NUMBERS&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">distinct&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">subquery&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">stmt&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">and_&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_seq&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">stmt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_seq&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">),&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PlanRow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">PlanRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RowProject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">PlanRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">order_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">with_entities&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">order_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;order_id&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_project_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;project_id&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">Order&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">purchase_unit&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fac_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mat_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mat_desc&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">PlanRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com_qty&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">row_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">PlanRow&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plan_row_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_id&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_qty&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_seq&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">single_pack_cycle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">order_by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RowProject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">BatchDetail&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">batch_seq&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="n">stmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">outerjoin&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plan_id&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plan_id&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">or_&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">completion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">is_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">None&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">completion&lt;/span>
&lt;span class="o">==&lt;/span> &lt;span class="n">constants&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ProducePlanCompletion&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">not_scheduled&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">distinct&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="n">subquery&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">db&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ProducePlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">filter&lt;/span>&lt;span class="p">(&lt;/span>
&lt;span class="n">ProduceUserPlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">project_id&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">in_&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stmt&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">ProduceUserPlan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">proc_type&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;design&amp;#39;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>Python安装</title><link>https://huangkai1008.github.io/p/python%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 08 Jan 2017 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="python安装">Python安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Platform: centos7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Version: 3.7&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装编译环境&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel libffi-devel
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>下载&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wget --no-check-certificate https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建安装目录解压&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mkdir /usr/local/python3
tar -zxvf Python-3.7.4.tgz
&lt;span class="nb">cd&lt;/span> Python-3.7.4/
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>编译安装&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo ./configure --prefix&lt;span class="o">=&lt;/span>/usr/local/python3 &lt;span class="c1"># 指定创建的目录&lt;/span>
make &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install &lt;span class="c1"># 编译安装&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="软链接">软链接&lt;/h2>
&lt;ul>
&lt;li>创建python和pip软链接
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">ln -s /usr/local/python3/bin/python3 /usr/bin/python3 &lt;span class="c1"># python3 软链接&lt;/span>
ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 &lt;span class="c1"># pip3软链接&lt;/span>
ln -s /usr/local/python3/bin/pipenv /usr/bin/pipenv &lt;span class="c1"># pipenv软链接&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="使用pyenv管理多个python版本">使用pyenv管理多个Python版本&lt;/h2>
&lt;h3 id="安装pyenv">安装pyenv&lt;/h3>
&lt;ul>
&lt;li>安装脚本
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">curl https://pyenv.run &lt;span class="p">|&lt;/span> bash
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>manjaro
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S pyenv
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="pyenv基本使用">pyenv基本使用&lt;/h3>
&lt;ul>
&lt;li>展示可以安装的版本
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pyenv install --list
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>安装python
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pyenv install 3.7.4
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>manjaro如遇到ModuleNotFoundError: No module named &amp;lsquo;_ctypes&amp;rsquo;, 可执行&lt;code>sudo pacman -S pkgconf libffi&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>查看可使用的版本，带*表示当前使用的版本
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">$ pyenv versions
* system &lt;span class="o">(&lt;/span>&lt;span class="nb">set&lt;/span> by /home/huangkai/.pyenv/version&lt;span class="o">)&lt;/span>
3.7.4
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>配置及管理python版本
&lt;ul>
&lt;li>使用pyenv global &lt;!-- raw HTML omitted -->配置当前用户的系统使用的python版本&lt;/li>
&lt;li>使用pyenv shell &lt;!-- raw HTML omitted -->配置当前shell的python版本，退出shell则失效&lt;/li>
&lt;li>使用pyenv local &lt;!-- raw HTML omitted -->配置所在项目（目录）的python版本&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Huanghuang's Blog</title><link>https://huangkai1008.github.io/categories/python/</link><description>Recent content in Python on Huanghuang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 22 Nov 2019 15:19:35 +0800</lastBuildDate><atom:link href="https://huangkai1008.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>日志库Loguru使用教程</title><link>https://huangkai1008.github.io/p/%E6%97%A5%E5%BF%97%E5%BA%93loguru%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link><pubDate>Fri, 22 Nov 2019 15:19:35 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%97%A5%E5%BF%97%E5%BA%93loguru%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid><description>Loguru是一个好用的第三方python日志库
安装 pip install loguru 初步使用 添加日志到标准输出流 import sys from loguru import logger logger.add(sys.stderr, format=&amp;#39;{time} {level} {message}&amp;#39;, filter=&amp;#39;my module&amp;#39;, level=&amp;#39;INFO&amp;#39;) 添加日志到文件 from loguru import logger logger.add(&amp;#39;file_1.log&amp;#39;, rotation=&amp;#39;500 MB&amp;#39;) # Automatically rotate too big file logger.add(&amp;#34;file_2.log&amp;#34;, rotation=&amp;#39;12:00&amp;#39;) # New file is created each day at noon logger.add(&amp;#34;file_3.log&amp;#34;, rotation=&amp;#34;1 week&amp;#34;) # Once the file is too old, it&amp;#39;s rotated logger.add(&amp;#34;file_X.log&amp;#34;, retention=&amp;#34;10 days&amp;#34;) # Cleanup after some time logger.add(&amp;#34;file_Y.log&amp;#34;, compression=&amp;#34;zip&amp;#34;) # Save some loved space 捕获异常 from loguru import logger @logger.</description></item><item><title>Eventlet使用</title><link>https://huangkai1008.github.io/p/eventlet%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 22 Nov 2019 11:20:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/eventlet%E4%BD%BF%E7%94%A8/</guid><description>Evenlet是一个Python的基于携程的网络库，它改变了你代码运行的方式，但是没有改变你怎么写代码
安装 pip install eventlet 简单使用 从eventlet.green导入相关库 import eventlet from eventlet.green import urllib2 urls = [ &amp;#34;https://www.google.com/intl/en_ALL/images/logo.gif&amp;#34;, &amp;#34;http://python.org/images/python-logo.gif&amp;#34;, &amp;#34;http://us.i1.yimg.com/us.yimg.com/i/ww/beta/y3.gif&amp;#34;, ] def fetch(url): print(&amp;#34;opening&amp;#34;, url) body = urllib2.urlopen(url).read() print(&amp;#34;done with&amp;#34;, url) return url, body pool = eventlet.GreenPool(200) for url, body in pool.imap(fetch, urls): print(&amp;#34;got body from&amp;#34;, url, &amp;#34;of length&amp;#34;, len(body)) 使用spawn使用协程 import time import eventlet def green_thread_1(num): eventlet.greenthread.sleep(1) print(f&amp;#39;green_thread_1 get result {num}&amp;#39;) return x def green_thread_2(num): eventlet.greenthread.sleep(2) print(f&amp;#39;green_thread_2 get result {num}&amp;#39;) return y time1 = time.</description></item><item><title>Black安装和使用</title><link>https://huangkai1008.github.io/p/black%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 27 Sep 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/black%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>Black是一个毫不妥协的python代码格式化工具, 特点是可配置项较少 Black依赖于python3.6+, 官方地址在https://github.com/psf/black
Install pip install black Configure pyproject.toml
[tool.black] skip-string-normalization = true # 禁用双引号风格 pycharm
Create external tools
windows: File -&amp;gt; Settings -&amp;gt; Tools -&amp;gt; External Tools
Configure file watcher</description></item><item><title>Poetry安装和使用</title><link>https://huangkai1008.github.io/p/poetry%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Sat, 14 Sep 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/poetry%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description>安装 custom installer
curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python source $HOME/.poetry/env pip
pip install poetry # 不推荐, 可能会有冲突 验证安装
poetry --version 使用 项目初始化
从pipenv/pip等工具迁移
poetry init # 进入交互式命令行填写项目信息, 会生成pyproject.toml 添加依赖
添加包
poetry add poetry add fastapi=0.38.1 -E all # pipenv install fastapi[all] poetry add celery --extras &amp;#34;librabbitmq redis auth msgpack&amp;#34; # pip install &amp;#34;celery[librabbitmq,redis,auth,msgpack]&amp;#34; 依赖安装</description></item><item><title>值得关注的Python库</title><link>https://huangkai1008.github.io/p/%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84python%E5%BA%93/</link><pubDate>Mon, 27 May 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E5%80%BC%E5%BE%97%E5%85%B3%E6%B3%A8%E7%9A%84python%E5%BA%93/</guid><description>Web Frameworks Uvicorn 基于asyncio开发的一个轻量级高效的 web 服务器框架 Starlette Quart Responder Fastapi Sanic Utils Poetry 新的Python依赖包管理工具 Pipenv 用了很久的现在也在用的&amp;hellip; 有时候Locking速度感人, pipfile声明版本可以防止很多坑 Black 代码格式化库 Loguru python日志库 PySnooper python Debugger ORM Gino tortoise-orm Test locust 压力测试工具 Environment python-dotenv environs</description></item><item><title>WSGI ASGI UWSGI的区别</title><link>https://huangkai1008.github.io/p/wsgi-asgi-uwsgi%E7%9A%84%E5%8C%BA%E5%88%AB/</link><pubDate>Thu, 24 Jan 2019 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/wsgi-asgi-uwsgi%E7%9A%84%E5%8C%BA%E5%88%AB/</guid><description>What is wsgi **CGI(通用网关接口， Common Gateway Interface/CGI)** **CGI是定义客户端与web服务器交流方式的程序**。&amp;lt;u&amp;gt;例如正常情况下客户端发来一个请求，根据HTTP协议Web服务器将请求内容解析出来，进过计算后，再将加us安出来的内容封装好，例如服务器返回一个HTML页面，并且根据HTTP协议构建返回内容的响应格式。涉及到TCP连接、HTTP原始请求和相应格式的这些，都由一个软件来完成，这时，以上的工作需要一个程序来完成，而这个程序便是CGI&amp;lt;/u&amp;gt;** **WSGI(Web服务器网关接口(Python Web Server Gateway Interface，WSGI)** `WSGI`就是基于`Python`的以`CGI`为标准做一些扩展的协议 What is uwsgi uWSGI，是指实现了WSGI协议的一个web服务器。即用来接受客户端请求，转发响应的程序
What is asgi 异步网关协议接口，一个介于网络协议服务和`Python`应用之间的标准接口，能够处理多种通用的协议类型，包括`HTTP`，`HTTP2`和`WebSocket` ASGI尝试保持在一个简单的应用接口的前提下，提供允许数据能够在任意的时候、被任意应用进程发送和接受的抽象。并且同样描述了一个新的，兼容HTTP请求响应以及WebSocket数据帧的序列格式。允许这些协议能通过网络或本地socket进行传输，以及让不同的协议被分配到不同的进程中
Difference between wsgi &amp;amp; asgi 1. Wsgi is based on `Http`, not support `websocket` 2. Asgi is the extension of wsgi.</description></item><item><title>扩展Python Json Encoder</title><link>https://huangkai1008.github.io/p/%E6%89%A9%E5%B1%95python-json-encoder/</link><pubDate>Mon, 09 Apr 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/%E6%89%A9%E5%B1%95python-json-encoder/</guid><description>Python默认的json模块序列化并不是很全面，只能序列化基本的数据类型, 像一些时间格式或者自定义类型都不能序列化，所以在有些时候需要扩展json模块的json encoder
扩展 import datetime as dt import decimal import json import enum from collections.abc import Iterator class ExtendedEncoder(json.JSONEncoder): def default(self, o): if isinstance(o, dt.datetime): return o.strftime(&amp;#39;%Y-%m-%d%H:%M:%S&amp;#39;) elif isinstance(o, dt.date): return o.strftime(&amp;#39;%Y-%m-%d&amp;#39;) elif isinstance(o, decimal.Decimal): return float(o) elif isinstance(o, Iterator): return list(o) elif isinstance(o, enum.Enum): return o.value return json.JSONEncoder.default(self, o) 使用场景 日常格式化
例如对于日期格式的格式化
import datetime as dt now = dt.datetime.now() 对于now如果使用json.dumps(t_now)便会触发TypeError: Object of type datetime is not JSON serializable使用扩展的Encoder</description></item><item><title>Python线程池使用</title><link>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 08 Feb 2018 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BD%BF%E7%94%A8/</guid><description>介绍 从Python3.2开始，标准库为我们提供了 concurrent.futures 模块，它提供了 ThreadPoolExecutor (线程池)和ProcessPoolExecutor (进程池)两个类。
相比 threading 等模块，该模块通过 submit 返回的是一个 future 对象，它是一个未来可期的对象，通过它可以获悉线程的状态主线程(或进程)中可以获取某一个线程(进程)执行的状态或者某一个任务执行的状态及返回值：
1.主线程可以获取某一个线程（或者任务的）的状态，以及返回值。
2.当一个线程完成的时候，主线程能够立即知道。
3.让多线程和多进程的编码接口一致。
基本使用 from concurrent.futures import ThreadPoolExecutor import time def get_page(url): time.sleep(url) return url with ThreadPoolExecutor(max_workers=5) as t: # 创建一个最大容纳数量为5的线程池 task1 = t.submit(get_page, 1) task2 = t.submit(get_page, 2) # 通过submit提交执行的函数到线程池中 task3 = t.submit(get_page, 3) print(f&amp;#34;task1: {task1.done()}&amp;#34;) # 通过done来判断线程是否完成 print(f&amp;#34;task2: {task2.done()}&amp;#34;) print(f&amp;#34;task3: {task3.done()}&amp;#34;) time.sleep(2.5) print(f&amp;#34;task1: {task1.done()}&amp;#34;) print(f&amp;#34;task2: {task2.done()}&amp;#34;) print(f&amp;#34;task3: {task3.done()}&amp;#34;) print(task1.result()) # 通过result来获取返回值 &amp;gt;&amp;gt;&amp;gt; task1: False task2: False task3: False .</description></item><item><title>Sqlalchemy使用注意</title><link>https://huangkai1008.github.io/p/sqlalchemy%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</link><pubDate>Wed, 14 Jun 2017 13:56:20 +0800</pubDate><guid>https://huangkai1008.github.io/p/sqlalchemy%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</guid><description>遇到in查询之类的批量删除或者更新，可以使用synchronize_session=False
db.session.delete(synchronize_session=False) 使用find_in_set
from sqlalchemy.sql.expression import func db.session.query(Post).filter(func.find_in_set(&amp;#39;10&amp;#39;, Post.c.tag_id)) 批量增加删除
db.session.add_all(instances) db.session.delete_all(instances) Mysql IS NULL判断
isnot() is_() Mysql 联合主键
from sqlalchemy import PrimaryKeyConstraint class Node(Model): __table_args__ = ( PrimaryKeyConstraint(&amp;#39;pk1&amp;#39;, &amp;#39;pk2&amp;#39;), ) Flask_sqlalchemy支持Double精度类型字段
from sqlalchemy import Column from sqlalchemy.dialects.mysql import DOUBLE from app import db class BaseModel(Model): id = db.Column(db.Integer, primary_key=True) # Flask_sqlalchemy double_column = Column(DOUBLE, comment=&amp;#39;双精度字段&amp;#39;) # Sqlalchemy mysql double column subquery使用实例</description></item><item><title>Python安装</title><link>https://huangkai1008.github.io/p/python%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 08 Jan 2017 22:49:14 +0800</pubDate><guid>https://huangkai1008.github.io/p/python%E5%AE%89%E8%A3%85/</guid><description>Python安装 Platform: centos7
Version: 3.7
安装编译环境
yum install zlib-devel bzip2-devel openssl-devel ncurses-devel libffi-devel 下载
wget --no-check-certificate https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz 创建安装目录解压
sudo mkdir /usr/local/python3 tar -zxvf Python-3.7.4.tgz cd Python-3.7.4/ 编译安装
sudo ./configure --prefix=/usr/local/python3 # 指定创建的目录 make &amp;amp;&amp;amp; make install # 编译安装 软链接 创建python和pip软链接 ln -s /usr/local/python3/bin/python3 /usr/bin/python3 # python3 软链接 ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 # pip3软链接 ln -s /usr/local/python3/bin/pipenv /usr/bin/pipenv # pipenv软链接 使用pyenv管理多个Python版本 安装pyenv 安装脚本 curl https://pyenv.</description></item></channel></rss>